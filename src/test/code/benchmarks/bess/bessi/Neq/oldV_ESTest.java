/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 14:59:39 GMT 2024
 */

package benchmarks.bess.bessi.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.bess.bessi.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      oldV oldV0 = new oldV();
      oldV.snippet(3.75, 3.75);
      oldV.snippet(0.0360768, 982.76);
      oldV.snippet(0.39894228, 982.76);
      oldV.snippet(0.0360768, 0.0);
      oldV.snippet((-10000.0), Double.NaN);
      oldV.snippet(0.0360768, 0.0);
      oldV.snippet(3622.33, 3.75);
      oldV.snippet((-10000.0), 982.76);
      oldV.snippet(0.0, 1.0);
      oldV.snippet(374.8, (-10000.0));
      oldV.snippet(982.76, (-10000.0));
      oldV.snippet((-10000.0), 1.0);
      oldV.snippet(0.0, (-10000.0));
      oldV.snippet(1.0, (-10000.0));
      oldV.snippet(8.0E-10, Double.NaN);
      oldV.snippet(0.0, 0.01328592);
      oldV.snippet(1.0, 1324.6877);
      oldV.snippet(0.0360768, (-5082.485746387455));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      oldV oldV0 = new oldV();
      oldV.snippet(4202.3290324, 4202.3290324);
      double double0 = (-1153.6551708172983);
      oldV.snippet(4202.3290324, (-1153.6551708172983));
      double double1 = (-2991.8529154);
      oldV.snippet((-2991.8529154), (-2991.8529154));
      oldV.snippet(0.0, (-1153.6551708172983));
      oldV.snippet(0.0, Double.NaN);
      // Undeclared exception!
      oldV.snippet(4202.3290324, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      oldV oldV0 = new oldV();
      oldV.snippet(2.0, 2.0);
      oldV.snippet(0.0, 0.0);
      oldV.snippet((-1836.63190374), (-10000.0));
      oldV.snippet(4662.708748937, 0.0);
      oldV.snippet((-10000.0), 0.0);
      oldV.snippet((-1.0), 0.0);
      oldV.snippet((-10000.0), 0.0);
      oldV.snippet(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      oldV oldV0 = new oldV();
      oldV.snippet(830.0, (-904.003947305175));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      oldV.snippet(0.0, 0.0);
      oldV.snippet((-1.0), (-1.0));
      oldV oldV0 = new oldV();
      oldV.snippet(0.0, 0.0);
      double double0 = oldV.snippet((-10000.0), (-10000.0));
      assertEquals((-10000.0), double0, 0.01);
      
      double double1 = oldV.snippet(2797.4492, 0.0360768);
      assertEquals(Double.NaN, double1, 0.01);
      
      oldV.snippet(2797.4492, (-1.0));
      oldV.snippet(1355.72925, 1.0);
      double double2 = oldV.snippet(1067.07756533, (-1.0));
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = oldV.snippet((-989.4257289519554), (-1284.802384));
      assertEquals((-10000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = oldV.snippet(3933.86446254, 3933.86446254);
      assertEquals(Double.NaN, double0, 0.01);
      
      oldV oldV0 = new oldV();
      oldV.snippet(3933.86446254, Double.NaN);
      oldV.snippet(0.0, 0.0);
      oldV.snippet(0.0, 0.0);
      double double1 = oldV.snippet(Double.NaN, (-2261.96));
      assertEquals(Double.NaN, double1, 0.01);
      
      oldV.snippet((-372.8871), (-1443.3365224768));
      oldV.snippet((-10000.0), 485.05819);
      oldV.snippet((-479.8102077386991), Double.NaN);
      double double2 = oldV.snippet(0.0, (-10000.0));
      assertEquals((-10000.0), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = oldV.snippet(669.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      oldV oldV0 = new oldV();
      double double1 = oldV.snippet(0.0, 0.0);
      assertEquals((-10000.0), double1, 0.01);
  }
}
