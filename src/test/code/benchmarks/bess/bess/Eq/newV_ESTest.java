/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 15:34:29 GMT 2024
 */

package benchmarks.bess.bess.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.bess.bess.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = newV.bessk((-8.0), (-8.0));
      assertEquals((-1000.0), double0, 0.01);
      
      double double1 = newV.bessj1((-8.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.23463634662568797), double1, 0.01);
      
      double double2 = newV.bessj0((-1.121442418E7));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.999999994457757, double2, 0.01);
      
      double double3 = newV.bessj0(1404.136);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.0000719242766454, double3, 0.01);
      
      double double4 = newV.bessj0((-915.674));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.9999135343200537, double4, 0.01);
      
      double double5 = newV.bessk((-1.121442418E7), 225.33483691227846);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-1000.0), double5, 0.01);
      
      double double6 = newV.bessk((-8.0), (-1.0));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals((-1000.0), double6, 0.01);
      
      double double7 = newV.bessk((-1000.0), (-1.0));
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals((-1000.0), double7, 0.01);
      
      double double8 = newV.bessj1((-5325.9367));
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(0.0016535370256963967, double8, 0.01);
      
      double double9 = newV.bessj((-1248.46366763), 0.0);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals((-1000.0), double9, 0.01);
      
      double double10 = newV.bessj((-1000.0), (-1000.0));
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals((-1000.0), double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 9494680.718;
      // Undeclared exception!
      newV.bessj(9494680.718, 9494680.718);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = newV.bessk(0.0, 0.0);
      assertEquals((-1000.0), double0, 0.01);
      
      double double1 = newV.bessj1((-1000.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.004728311885696068), double1, 0.01);
      
      double double2 = newV.bessj0(0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.00000000283141, double2, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double3 = newV.bessj0(0.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1.00000000283141, double3, 0.01);
      
      double double4 = newV.bessk(0.0, 1.00000000283141);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-1000.0), double4, 0.01);
      
      double double5 = newV.bessj0(3.0899424);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-0.2890181491648412), double5, 0.01);
      
      double double6 = newV.bessj1((-0.02057706));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals((-0.010287985470914633), double6, 0.01);
      
      double double7 = newV.bessj0((-0.004728311885696068));
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(0.9999944136056108, double7, 0.01);
      
      double double8 = newV.bessi((-8.8228987E-7), 0.0);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals((-10000.0), double8, 0.01);
      
      double double9 = newV.bessj(0.0, 0.9999944136056108);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals((-1000.0), double9, 0.01);
      
      double double10 = newV.bessj((-0.004728311885696068), (-1000.0));
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals((-1000.0), double10, 0.01);
      
      double double11 = newV.bessi(3.0899424, (-6.911147651E-6));
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals(double11, double1, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(0.0, double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = newV.bessj1(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = newV.bessj0(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.00000000283141, double1, 0.01);
      
      double double2 = newV.bessj(0.0, 7.2362614232E10);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1000.0), double2, 0.01);
      
      double double3 = newV.bessj0(0.0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.00000000283141, double3, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double4 = newV.bessk(1521.30332868207, 0.0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = newV.bessj(1521.30332868207, (-1000.0));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(-0.0, double5, 0.01);
      
      double double6 = newV.bessj1(0.0);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = newV.bessk(Double.NaN, 1.0);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(2.2797317599999998, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double0 = newV.bessj1(991.3);
      assertEquals((-0.020058580113177266), double0, 0.01);
      
      double double1 = newV.bessk(20.0, 2.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8.742012583323515E28, double1, 0.01);
      
      double double2 = newV.bessj(913.76875041, 3077.005124);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-0.10857745118743284), double2, 0.01);
      
      double double3 = newV.bessj(20.0, 20.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.1666561305174159, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-671.05);
      double double1 = newV.bessk((-671.05), (-671.05));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1000.0), double1, 0.01);
      
      double double2 = newV.bessi((-671.05), (-1000.0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-10000.0), double2, 0.01);
      
      double double3 = newV.bessi((-1903.92565501), 0.0);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-10000.0), double3, 0.01);
      
      double double4 = newV.bessi(0.0, 0.0);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-10000.0), double4, 0.01);
      
      double double5 = newV.bessi((-3023.0), (-3023.0));
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-10000.0), double5, 0.01);
      
      double double6 = 0.0;
      double double7 = newV.bessi(0.0, (-1442.04711));
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals((-10000.0), double7, 0.01);
      
      // Undeclared exception!
      newV.bessk(5.7568490411E10, (-3023.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = newV.bessj1(1196.239);
      assertEquals(0.02299914577538902, double0, 0.01);
      
      double double1 = newV.bessi(1196.239, 0.02299914577538902);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = newV.bessj1((-473.48746));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.036458831013337537), double2, 0.01);
      
      double double3 = newV.bessi(0.0, 0.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-10000.0), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = newV.bessj(0.0, 0.0);
      assertEquals((-1000.0), double0, 0.01);
      
      double double1 = newV.bessj1(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = newV.bessj((-1095.60665797), (-1095.60665797));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals((-1000.0), double2, 0.01);
      
      double double3 = newV.bessj1(0.0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = newV.bessi(0.0, (-1000.0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-10000.0), double4, 0.01);
      
      double double5 = newV.bessi((-1000.0), 0.0);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals((-10000.0), double5, 0.01);
      
      double double6 = newV.bessi((-1.0), (-10000.0));
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals((-10000.0), double6, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double7 = newV.bessj(0.0, (-1000.0));
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals((-1000.0), double7, 0.01);
      
      double double8 = newV.bessj(20.0, 557.1490195068498);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(0.9403383470868873, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = newV.bessj0((-3354.9951856611688));
      assertEquals(0.9999684195032551, double0, 0.01);
      
      double double1 = newV.bessi((-3354.9951856611688), 0.9999684195032551);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-10000.0), double1, 0.01);
      
      double double2 = newV.bessj1((-976.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.02474864987085062), double2, 0.01);
      
      double double3 = newV.bessj((-3354.9951856611688), 1283.75);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-1000.0), double3, 0.01);
      
      double double4 = newV.bessk(0.0, 0.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals((-1000.0), double4, 0.01);
      
      double double5 = newV.bessj(0.0, 1283.75);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals((-1000.0), double5, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double6 = newV.bessj1(1226.1019948013);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(0.002178869879851894, double6, 0.01);
      
      double double7 = newV.bessj1(964.1907101499817);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(0.022456322516114596, double7, 0.01);
      
      double double8 = newV.bessj((-1000.0), (-3354.9951856611688));
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals((-1000.0), double8, 0.01);
      
      double double9 = (-1.0);
      double double10 = newV.bessk((-1000.0), (-1.0));
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals((-1000.0), double10, 0.01);
      
      double double11 = newV.bessj0((-3354.9951856611688));
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(0.9999684195032551, double11, 0.01);
      
      double double12 = newV.bessj(2000.7456507, (-1.0));
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      // Undeclared exception!
      newV.bessi(9494680.718, (-1000.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = newV.bessj(139.4985717, (-857.162));
      assertEquals((-0.472807257630638), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = newV.bessj(3595.9448, 3595.9448);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = newV.bessj0(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.00000000283141, double1, 0.01);
      
      double double2 = newV.bessj1(3595.9448);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.01228975576361801, double2, 0.01);
      
      double double3 = newV.bessj0(1.00000000283141);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.7651976825088956, double3, 0.01);
      
      double double4 = newV.bessj(1.00000000283141, 0.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-1000.0), double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = newV.bessj((-1518.1692215597143), (-1518.1692215597143));
      assertEquals((-1000.0), double0, 0.01);
      
      double double1 = newV.bessj1(5258.089087367);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.01087726957276226), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = newV.bessk(992.500054897425, 992.500054897425);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = newV.bessi(Double.POSITIVE_INFINITY, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      newV.bessk(7.2362614232E10, 1288.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = newV.bessi(4635.3116342, 4635.3116342);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = newV.bessj1(4635.3116342);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.007343021490377115), double1, 0.01);
      
      double double2 = newV.bessj(4635.3116342, 4635.3116342);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = newV.bessj1((-2.073370639E-6));
      assertEquals((-1.0366853196570318E-6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = newV.bessj(634.60396456492, 0.08845909143645003);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = newV.bessj0((-2086.499305795));
      assertEquals(0.9999820727989832, double0, 0.01);
      
      double double1 = newV.bessi(1394.90027521, (-2086.499305795));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = newV.bessk(Double.NaN, (-2086.499305795));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = newV.bessi((-1090.9577422), 0.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-10000.0), double3, 0.01);
      
      double double4 = newV.bessj0(0.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(1.00000000283141, double4, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double5 = newV.bessk(0.0, 0.0);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-1000.0), double5, 0.01);
      
      double double6 = newV.bessj1(1943.630017);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0.017620514771770582, double6, 0.01);
      
      double double7 = newV.bessi(0.0, 0.02282967);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals((-10000.0), double7, 0.01);
      
      double double8 = newV.bessk(1394.90027521, 2453.5367485);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double8, 0.01);
      
      // Undeclared exception!
      newV.bessk(99447.43394, 0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = newV.bessi((-510.0), 737.8257);
      assertEquals((-10000.0), double0, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double1 = newV.bessj(0.0, (-10000.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1000.0), double1, 0.01);
      
      double double2 = newV.bessi(737.8257, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = newV.bessk((-905.9357785659104), 0.0);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1000.0), double3, 0.01);
      
      double double4 = newV.bessj((-1000.0), 1.0);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-1000.0), double4, 0.01);
      
      double double5 = newV.bessk(873.50102755, 737.8257);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      
      double double6 = newV.bessj0((-510.0));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(1.0000666605840793, double6, 0.01);
      
      double double7 = newV.bessj0(2684.6823514018);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(1.0000385760818677, double7, 0.01);
      
      double double8 = newV.bessj(0.0, (-905.9357785659104));
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals((-1000.0), double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = newV.bessj1((-1264.91289));
      assertEquals((-0.020970225067722965), double0, 0.01);
      
      double double1 = newV.bessj0(3097.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.999960247786687, double1, 0.01);
      
      newV newV0 = new newV();
      assertNotNull(newV0);
      
      double double2 = newV.bessk(0.999960247786687, 0.2659732);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1000.0), double2, 0.01);
      
      double double3 = newV.bessj1(1622.3600749);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.00972391392656086, double3, 0.01);
      
      double double4 = newV.bessj1((-1457.4543703860913));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.017914833436116547, double4, 0.01);
      
      double double5 = newV.bessj((-1.0), (-1.0));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-1000.0), double5, 0.01);
      
      double double6 = newV.bessj(3097.0, (-1264.91289));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = newV.bessi(1061.87478546, (-634.2315));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = newV.bessj((-485.87706), (-1.0));
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals((-1000.0), double8, 0.01);
      
      double double9 = newV.bessj0((-485.87706));
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(1.0002466336903748, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      newV.bessi(1601.8294480095, 1601.8294480095);
      double double0 = newV.bessj(Double.NaN, 1.0);
      assertEquals(-0.0, double0, 0.01);
      
      double double1 = newV.bessj1(0.0);
      newV.bessj0(0.0);
      newV.bessj1((-1112.94042638058));
      newV newV0 = new newV();
      newV.bessk(0.0, (-1688.1645731377423));
      newV.bessi(384.6134809095941, Double.NaN);
      newV.bessi(0.0, 0.0);
      newV.bessj0(Double.NaN);
      double double2 = newV.bessi(22.012058527, 1.0);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = newV.bessj0(0.0);
      assertEquals(1.00000000283141, double3, 0.01);
      
      newV.bessk(22.012058527, 0.0);
      newV.bessj(0.0, 0.0);
      double double4 = newV.bessj1((-10000.0));
      assertEquals(double4, double1, 0.01);
      assertEquals((-0.0036474507602066017), double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      newV newV0 = new newV();
      double double0 = newV.bessk(701.87806721246, 701.87806721246);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      newV.bessi(0.0, 0.0);
      newV.bessi(0.0, (-10000.0));
      double double1 = newV.bessj(455.5188238174, (-10000.0));
      assertEquals(0.5594595193924552, double1, 0.01);
      
      newV.bessj1(Double.POSITIVE_INFINITY);
      newV.bessj((-332.6341955), 701.87806721246);
      double double2 = newV.bessi((-1504.3835138755), 0.0);
      assertEquals((-10000.0), double2, 0.01);
      
      double double3 = newV.bessk(4.0, Double.NaN);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = newV.bessk(0.0, 0.0);
      newV.bessj(0.0, (-1426.01057468));
      double double1 = newV.bessk(3132.319084572139, (-382.5932469639));
      assertEquals(Double.NaN, double1, 0.01);
      
      newV.bessi(0.0, 0.0);
      double double2 = newV.bessi(0.0, 0.0);
      assertEquals((-10000.0), double2, 0.01);
      
      newV newV0 = new newV();
      newV.bessj((-1000.0), (-10000.0));
      double double3 = newV.bessj0((-1000.0));
      assertEquals(1.0000233084330195, double3, 0.01);
      
      newV.bessi(2629.5, 0.0);
      double double4 = newV.bessj((-1426.01057468), Double.NaN);
      assertEquals(double4, double0, 0.01);
      assertEquals((-1000.0), double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      newV.bessk(0.00420059, 0.00420059);
      newV.bessk((-1000.0), (-1.0));
      newV.bessj1((-1000.0));
      newV.bessj1((-946.5345804667));
      newV.bessi((-1000.0), (-0.004728311885696068));
      newV.bessi(0.00420059, 0.0);
      double double0 = newV.bessk(0.0, 2492.57);
      newV.bessi((-0.004728311885696068), (-0.004728311885696068));
      newV newV0 = new newV();
      newV.bessj1(9494680.718);
      newV.bessi(533.5242234214363, 2113.0);
      newV.bessj0(0.0);
      double double1 = newV.bessk((-1756.3745), (-1627.73843));
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      newV.bessj1(380.007551644);
      newV.bessj1(380.007551644);
      newV.bessk(0.03230380876411627, 380.007551644);
      double double0 = newV.bessi(380.007551644, 42.9434054);
      assertEquals(Double.NaN, double0, 0.01);
      
      newV newV0 = new newV();
      double double1 = newV.bessj0((-1000.0));
      assertEquals(1.0000233084330195, double1, 0.01);
      
      double double2 = newV.bessj1(380.007551644);
      assertEquals(0.03230380876411627, double2, 0.01);
      
      double double3 = newV.bessk(42.9434054, 0.03230380876411627);
      assertEquals(2.26813524233305E12, double3, 0.01);
      
      double double4 = newV.bessi(1.0000233084330195, 20480.0);
      assertEquals((-10000.0), double4, 0.01);
      
      double double5 = newV.bessi((-1591.7669569), 0.03230380876411627);
      assertEquals(double5, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = newV.bessj1(929.61603);
      assertEquals((-0.023084830509719084), double0, 0.01);
      
      newV newV0 = new newV();
      newV.bessk(929.61603, 829.09839);
      double double1 = newV.bessj(0.04687499995, Double.POSITIVE_INFINITY);
      assertEquals((-1000.0), double1, 0.01);
      
      double double2 = newV.bessk(3002.462069127364, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = newV.bessi((-1887.82319489709), 0.0);
      assertEquals((-10000.0), double3, 0.01);
      
      newV.bessk(2131.4534, 2131.4534);
      newV.bessj1(0.0);
      newV.bessj1(0.0);
      double double4 = newV.bessj1(0.0);
      double double5 = newV.bessj0((-0.0025154));
      assertEquals(0.9999984210226643, double5, 0.01);
      
      double double6 = newV.bessj(Double.POSITIVE_INFINITY, 0.0);
      assertEquals(double6, double4, 0.01);
      
      newV.bessi(0.0, 0.0);
      newV.bessj0(0.0);
      double double7 = newV.bessj0(3002.462069127364);
      assertEquals(0.9999586352190433, double7, 0.01);
      
      double double8 = newV.bessi((-0.0025154), 1.029532985E9);
      assertEquals(double8, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      newV.bessk(0.00183105, 0.00183105);
      double double0 = newV.bessj1(0.0);
      newV.bessj1(0.0);
      double double1 = newV.bessi(0.00183105, 0.0);
      assertEquals((-10000.0), double1, 0.01);
      
      double double2 = newV.bessj1((-10000.0));
      assertEquals((-0.0036474507602066017), double2, 0.01);
      
      newV.bessk((-0.01647633), 0.0);
      newV newV0 = new newV();
      double double3 = newV.bessj0((-1000.0));
      assertEquals(1.0000233084330195, double3, 0.01);
      
      double double4 = newV.bessk(1.0000233084330195, 0.0);
      assertEquals((-1000.0), double4, 0.01);
      
      double double5 = newV.bessj(1425.471449, 0.0);
      assertEquals(double5, double0, 0.01);
      
      double double6 = newV.bessj0((-1.0));
      assertEquals(0.7651976837548592, double6, 0.01);
      
      double double7 = newV.bessi(2272.0, 1.0);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }
}
