/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 20:20:58 GMT 2024
 */

package benchmarks.tcas.NonCrossingBiasedDescend.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.tcas.NonCrossingBiasedDescend.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = newV.Own_Above_Threat((-1022), 0, 1, 0, (-1022), 3369, (-1022), 0, 3369, (-1022), 1965, (-1022), 0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = newV.Own_Below_Threat(0, 0, 0, 3088, 3088, 3088, 1, 0, 575, 0, 0, 575, 54, 2424);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb(4548, 4548, 4548, 4548, 0, 0, 4548, 0, (-1649), (-1649), (-2358), 2950, (-1649), (-1966));
      assertEquals((-1966), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = newV.ALIM(1, 1, 1, (-1), (-1), 1, (-1), (-1), (-1), 0, 0, (-1), (-1), (-1));
      assertEquals(500, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.snippet(2424, (-1176), 0, 819, (-2677), 1, 3959, 2, (-1735), 1, 300, 926, 819, 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1176
         //
         verifyException("benchmarks.tcas.NonCrossingBiasedDescend.Neq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb((-1246), 0, 0, 0, (-1246), 3, 0, 0, (-1246), 3, (-1482), 0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb(1, (-376), (-376), 1299, 1, 0, 640, (-2041), 640, (-2041), (-2041), 5045, (-376), 0);
      assertEquals(300, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = newV.Own_Above_Threat(4, 2424, (-1644), 2424, 0, 54, 1103, 0, (-721), 1103, (-959), 0, 575, 2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = newV.Own_Above_Threat(1388, 740, 1388, 1388, 4570, 740, 100, 100, 4570, 1388, 0, 0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = newV.Own_Below_Threat(0, 0, 0, 0, 0, 0, 819, 0, 575, 0, 0, 575, 3959, 2424);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = newV.Own_Below_Threat((-1082), (-1), 500, (-1), (-357), 1, 0, 500, (-1082), 290, 500, 1, 1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.ALIM((-1), (-1), 1, 500, 1, 391, (-1), 4, (-3238), 1389, (-784), (-3238), 391, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("benchmarks.tcas.NonCrossingBiasedDescend.Neq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = newV.snippet(0, 1, 1, 300, 0, 0, 730, 0, 0, 1, 1, 1, 3732, 614);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = newV.snippet((-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622), (-622));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = newV.snippet(1, 0, 652, 0, 1, 0, 0, 0, 652, 0, 652, 652, 0, 652);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = newV.snippet(0, (-844), 475, (-844), (-844), (-844), 0, (-844), (-844), 0, (-844), (-844), (-844), 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = newV.snippet(0, 0, 3732, 3732, 202, 0, 0, 202, 0, 3732, (-435), 0, 0, 614);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = newV.snippet(1, 0, (-214), 1, 1, (-1), 1389, 4, 1389, (-1), 500, 1389, 2553, 1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      newV newV0 = new newV();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = newV.snippet(1, 0, 575, 0, 1, 0, 3959, 0, 2424, (-737), 300, 2424, 819, 3959);
      assertEquals(0.0, double0, 0.01);
  }
}
