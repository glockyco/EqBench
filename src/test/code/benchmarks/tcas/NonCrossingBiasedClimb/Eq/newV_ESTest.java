/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 20:14:21 GMT 2024
 */

package benchmarks.tcas.NonCrossingBiasedClimb.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.tcas.NonCrossingBiasedClimb.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = newV.Own_Above_Threat(2, 1727, 0, (-674), (-586), 740, (-1), 0, 3392, 1, 740, 75, (-586), (-1461));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = newV.checkCon(0, 0, 0, 0, 128, 128, 128, 100, 100, 100, 100, 0, 128, 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb(0, 0, 0, 0, (-1), 1, 1, (-1), 1, 0, 1, 500, (-2124), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = newV.ALIM(1, 1, 740, 0, 0, 740, 0, 740, 740, 435, 0, 435, 0, 740);
      assertEquals(500, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.checkCon((-1), 651, (-3460), 400, 651, 0, 740, 0, 713, 0, (-3460), 0, 740, 740, 400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3460
         //
         verifyException("benchmarks.tcas.NonCrossingBiasedClimb.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb((-173), (-173), 0, 396, 396, 0, (-173), (-1583), 0, 396, 0, 0, 0, (-1583));
      assertEquals((-1583), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb(1, 1, 3, 1, 4, 3, 157, 3, 1, 2362, 0, 383, 3, 0);
      assertEquals(300, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = newV.Own_Above_Threat((-2745), (-2745), (-2745), 698, (-2745), (-2745), 4168, 0, 0, 0, (-2745), 0, 0, 750);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = newV.Own_Above_Threat((-1), (-1), (-1), (-1), 0, 0, 0, (-1148), 79, (-931), 0, (-1), 0, 3477);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = newV.Own_Below_Threat(0, (-2124), (-1), (-88), 2028, (-2124), 0, 0, 1093, 0, 3, 3, 1, 3);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = newV.Own_Below_Threat(0, 64, (-389), 0, (-2204), 0, 73, 3023, (-496), 640, 1177, 2633, 640, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = newV.checkCon(442, 1, 442, 1, 2362, 0, 538, 1, 538, 0, 442, 0, 0, 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = newV.checkCon(0, 0, 0, 0, 1, (-1), 0, 0, 1, (-3108), (-2787), 2, 958, 1, 400);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.ALIM((-3120), 1660, 0, 0, 585, 300, 0, 752, (-3120), (-1746), (-2548), 500, 640, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1660
         //
         verifyException("benchmarks.tcas.NonCrossingBiasedClimb.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = newV.checkCon((-29), 1, (-29), (-29), (-29), 1, 1, 1, 1, 1, (-29), (-29), 1, (-29), (-29));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = newV.snippet(823, 1, (-29), 823, (-29), 823, (-29), (-1976), (-29), 1, 1090, 1090, 823, 823);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = newV.snippet(1, 1, 1, (-1976), (-29), (-29), (-1976), (-1976), (-29), (-1976), (-1976), (-29), 1, 1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = newV.snippet((-29), 1, (-29), (-1976), (-29), 1, (-29), 1, (-29), 1, (-29), (-29), 823, 1090);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = newV.snippet((-3584), 1, (-3584), (-3584), 1, 1, 4, (-3584), (-3584), 1, 4, 0, 1, 4);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = newV.snippet(1, 1, (-1976), (-29), 823, 1, 1, 1, (-29), 1, (-29), (-1976), 1, (-1976));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.snippet(4777, 3023, 3865, 819, (-389), 3865, 287, 0, 1177, 0, 0, 0, 0, 3593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3023
         //
         verifyException("benchmarks.tcas.NonCrossingBiasedClimb.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      newV newV0 = new newV();
  }
}
