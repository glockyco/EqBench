/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 20:23:18 GMT 2024
 */

package benchmarks.tcas.altseptest.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.tcas.altseptest.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend(2077, (-815), 0, 0, 0, 597, 597, 2077, (-815), 0, 597, (-2390), (-815), (-978));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend(2532, 0, 0, (-2633), (-2667), (-210), 500, (-2667), 300, (-425), 300, 300, (-75), 300);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = newV.checkCond1(1, 0, (-48));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = newV.snippet(2646, 0, 14, (-1), 3546, 0, (-465), (-232), 1, (-675), 0, 3, (-808), 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb(0, 0, 0, 0, (-1), 0, (-1), 0, 1, (-1), 0, 0, (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb((-2841), (-2841), 100, (-2841), 0, (-2841), 100, (-2841), 100, (-2841), 0, 100, 0, (-955));
      assertEquals((-955), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.snippet(400, (-1600), (-2352), 2291, 2695, (-283), (-492), 0, 1, (-2352), 1158, 300, 2291, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1600
         //
         verifyException("benchmarks.tcas.altseptest.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.Non_Crossing_Biased_Climb((-1), (-1), (-1), 1, 1, 1, (-1), 400, (-1467), 0, 2450, 1005, 400, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("benchmarks.tcas.altseptest.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.ALIM((-577), 2163, 1971, (-2158), 1742, 0, (-2737), 0, (-1650), 2163, (-577), 0, (-1041), 1637);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2163
         //
         verifyException("benchmarks.tcas.altseptest.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = newV.Inhibit_Biased_Climb(1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1);
      assertEquals(301, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = newV.Own_Above_Threat(703, 703, 1, (-1008), (-192), (-4720), 2, 1800, 2, 1, 1, 2729, 2, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = newV.Own_Above_Threat((-1364), 14, (-25), 0, 724, 14, (-25), 0, (-465), (-25), 0, 361, 1, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend((-1795), 0, 560, 1353, 600, (-53), 1353, 1353, 4981, 0, 0, 1353, 1353, 1353);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend(0, 0, 0, 0, 0, 0, 0, 0, 0, (-1), (-1), 0, (-3052), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = newV.Own_Below_Threat(3644, 34, 3644, 34, 3644, 2, 0, 2, 34, 3644, 0, 0, 3644, (-666));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = newV.Own_Below_Threat(1, (-2553), 510, 510, 510, (-102), 0, (-1951), 0, (-1951), (-3276), (-3574), 278, 1650);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(400, 0, (-1951), 0, 510, 510, (-2553), 0, 0, 400, 1675, (-566), 1675, 1506);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(3450, 3450, 3450, 2, 3450, (-1189), 3450, (-1189), (-1189), 2, (-2681), 0, 2, (-1595));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(1, 1, 1, 1, 765, 1, 1, 0, 1, 765, (-4748), 1, 0, 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = newV.checkCond2((-680), 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = newV.checkCond1(2045, 0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = newV.checkCond1(1, 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = newV.ALIM((-102), 0, 0, (-102), 0, (-102), 0, (-102), 0, (-102), 1675, 0, 0, 0);
      assertEquals(400, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend(1, 0, 1, 237, 1, 1, 1, 0, 1, 0, 0, 1, 628, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend(1539, 0, 0, (-971), 1352, 1539, (-971), 1539, 0, (-971), 1352, 0, 1352, 1539);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        newV.Non_Crossing_Biased_Descend(0, 653, 245, 237, 1, 0, 600, 1, 600, 1, 600, 628, 1, 2424);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 653
         //
         verifyException("benchmarks.tcas.altseptest.Eq.newV", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Descend((-959), 0, 1, 0, (-1331), 1, 1, (-613), (-303), 0, 0, 0, (-4309), 3960);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(640, 0, (-2802), (-1), (-1), (-1), 640, (-1), 0, (-1), 400, 0, (-1), (-2802));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(400, 400, (-1999), 400, 0, (-133), 400, 400, 621, (-874), (-133), (-133), 400, (-3310));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(477, 0, (-1250), (-1534), 14, 955, 0, 955, 0, (-1314), (-4882), (-2020), 0, 2576);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = newV.checkCond2(1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = newV.checkCond2(1, 400);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = newV.checkCond1(1, 0, 245);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = newV.snippet(13, 13, 13, 13, 13, 0, 0, 0, 1, 0, 2822, 0, 1650, 2887);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = newV.snippet(927, (-1951), 907, 0, (-843), (-1913), (-1), 278, 1, (-102), 803, (-843), 311, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = newV.snippet(0, 0, (-1), 3330, 0, 0, 0, 0, 1, 0, 2822, 1, 1650, 2887);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = newV.snippet((-4722), 2, 1, 1, 1, (-1484), 2, 0, 1, 600, 600, 1, 1, 600);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = newV.snippet(0, 0, 0, 0, 301, 0, 0, 301, 1, 1002, 0, 0, 301, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = newV.snippet(0, 0, 0, 3330, 0, 0, 0, 0, 1, 0, 2822, 0, 1650, 1650);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = newV.snippet((-4748), 2, 1, 1, 1, (-1484), 2, 0, 0, 2, 2, 1, 1, 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = newV.Non_Crossing_Biased_Climb(1255, 1, 2, (-461), 2729, 2, 1255, 2, (-192), (-4720), 0, 1384, 1384, 2729);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      newV newV0 = new newV();
  }
}
