/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:26:03 GMT 2024
 */

package benchmarks.raytrace.light.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.light.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.00392156F, 0.0F, 0.001F);
      newV_Vector3D0.normalize();
      assertEquals(0.24709342F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1.0F), 2591.6F, (-1.0F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals((-1.0F), newV_Vector3D1.x, 0.01F);
      assertEquals((-1.0F), newV_Vector3D1.z, 0.01F);
      assertEquals(2591.6F, newV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-209.69458F), 0.0F, 83.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(0.0F, newV_Vector3D1.y, 0.01F);
      assertEquals(83.0F, newV_Vector3D1.z, 0.01F);
      assertEquals((-209.69458F), newV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Light newV_Light0 = new newV.Light((-2835), (newV.Vector3D) null, 0.0F, 0.0F, 1.0F);
      assertEquals((-2835), newV_Light0.lightType);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals(1.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(95, 1012.8128F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(95, newV_Vector3D0, (-508.5327F), 0.0F, 0.0F);
      assertEquals(95, newV_Light0.lightType);
      assertEquals(1012.8128F, newV_Vector3D0.y, 0.01F);
      assertEquals((-508.5327F), newV_Light0.ir, 0.01F);
      assertEquals(95.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Light newV_Light0 = new newV.Light(2746, (newV.Vector3D) null, 2746, 2746, (-1.0F));
      assertEquals(2746, newV_Light0.lightType);
      assertEquals(2746.0F, newV_Light0.ir, 0.01F);
      assertEquals(2746.0F, newV_Light0.ig, 0.01F);
      assertEquals((-1.0F), newV_Light0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-2344.0F), (-209.69458F), (-209.69458F), 2563.5F, 2563.5F, 2563.5F, (-209.69458F), 2563.5F, (-2344.0F), 0.0F);
      assertEquals((-2344.0F), newV_Surface0.ir, 0.01F);
      assertEquals((-2344.0F), newV_Surface0.kt, 0.01F);
      assertEquals((-209.69458F), newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(2563.5F, newV_Surface0.ks, 0.01F);
      assertEquals(2563.5F, newV_Surface0.kd, 0.01F);
      assertEquals((-209.69458F), newV_Surface0.ib, 0.01F);
      assertEquals(10.052919F, newV_Surface0.kr, 0.01F);
      assertEquals(2563.5F, newV_Surface0.ka, 0.01F);
      assertEquals((-209.69458F), newV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Surface newV_Surface0 = new newV.Surface(665.1F, 665.1F, 0.0F, 2908.6367F, 665.1F, 2908.6367F, 665.1F, 0.0F, 0.0F, 1991.8646F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(0.0F, 665.1F, 0.001F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 1331.1925F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 665.1F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(665.1F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(2908.6367F, newV_Surface0.ks, 0.01F);
      assertEquals(2908.6367F, newV_Surface0.ka, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.x, 0.01F);
      assertEquals(665.1F, newV_Surface0.kd, 0.01F);
      assertEquals(665.1F, newV_Surface0.ns, 0.01F);
      assertEquals(1991.8646F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertTrue(boolean0);
      assertEquals(665.1F, newV_Surface0.ig, 0.01F);
      assertEquals(0.001F, newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(151.0F, 3632.0F, 151.0F, 0.0F, 3632.0F, 151.0F, 1923.3329F, 0.0F, 0.0F, 0.0F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(3632.0F, 0.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 79.49363F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(151.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(151.0F, newV_Surface0.ir, 0.01F);
      assertEquals(1923.3329F, newV_Surface0.ns, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(3632.0F, newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals(151.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals(3632.0F, newV_Surface0.ig, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(3208.988F, 12.584239F, 3208.988F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.002772951F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV_Vector3D0.normalize();
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(3208.988F, 3208.988F, 3208.988F, 3208.988F, 3208.988F, 3208.988F, 3208.988F, 3208.988F, 3208.988F, 3208.988F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(3208.988F, 12.584239F, 3208.988F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(12.584239F, 3208.988F, 0.7071041F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.002772951F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 3208.988F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(3208.988F, newV_Surface0.ka, 0.01F);
      assertEquals(12.584239F, newV_Vector3D1.x, 0.01F);
      assertEquals(3208.988F, newV_Surface0.kt, 0.01F);
      assertEquals(3208.988F, newV_Surface0.ks, 0.01F);
      assertEquals(3208.988F, newV_Surface0.ns, 0.01F);
      assertEquals(0.7071041F, newV_Vector3D1.z, 0.01F);
      assertEquals(3208.988F, newV_Surface0.nt, 0.01F);
      assertEquals(3208.988F, newV_Vector3D1.y, 0.01F);
      assertFalse(boolean0);
      assertEquals(3208.988F, newV_Surface0.ig, 0.01F);
      assertEquals(3208.988F, newV_Surface0.ib, 0.01F);
      assertEquals(3208.988F, newV_Surface0.kd, 0.01F);
      assertEquals(12.584239F, newV_Surface0.kr, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 0.0F, 0, 0.0F);
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Light0.lvec, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertTrue(boolean0);
      assertEquals(0.0F, newV_Surface0.ns, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV newV0 = new newV();
  }
}
