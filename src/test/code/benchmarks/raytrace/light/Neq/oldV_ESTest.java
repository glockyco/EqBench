/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:24:58 GMT 2024
 */

package benchmarks.raytrace.light.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.light.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-829.0751F), (-829.0751F), (-829.0751F));
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals((-0.57735026F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-833.4F), 1784.04F, (-833.4F));
      oldV_Vector3D0.normalize();
      assertEquals((-0.38976663F), oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, (-2870.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-2870.0F), oldV_Vector3D1.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.001F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.x, 0.01F);
      assertEquals(0.001F, oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1.0F, 1.0F, 1.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(1.0F, oldV_Vector3D1.x, 0.01F);
      assertEquals(1.0F, oldV_Vector3D1.z, 0.01F);
      assertEquals(1.0F, oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, (-829.0751F), 4074.9844F, (-751.5127F), (-0.57735026F), 1.0F, 1651.0F, 552.94464F, 0.0F, 1.0F);
      assertEquals(4074.9844F, oldV_Surface0.ib, 0.01F);
      assertEquals(2.1684055F, oldV_Surface0.kr, 0.01F);
      assertEquals(1651.0F, oldV_Surface0.ns, 0.01F);
      assertEquals((-751.5127F), oldV_Surface0.ka, 0.01F);
      assertEquals((-0.57735026F), oldV_Surface0.kd, 0.01F);
      assertEquals(1.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ks, 0.01F);
      assertEquals((-829.0751F), oldV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1035.97F), 0.0F, 0.0F);
      oldV_Vector3D0.z = 1162.8F;
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.0F, 1162.8F, 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 3634.8435F, 1593.4126F, 747.604F, 3634.8435F, 0.0F, 3634.8435F, 1162.8F, (-313.1938F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 3634.8435F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 747.604F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(1593.4126F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(3634.8435F, oldV_Surface0.ks, 0.01F);
      assertTrue(boolean0);
      assertEquals(747.604F, oldV_Surface0.kd, 0.01F);
      assertEquals((-313.1938F), oldV_Surface0.nt, 0.01F);
      assertEquals(14.254257F, oldV_Surface0.kr, 0.01F);
      assertEquals(3634.8435F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
      assertEquals(1162.8F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertEquals((-1035.97F), oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface((-0.53266597F), (-0.53266597F), (-0.53266597F), (-0.53266597F), (-0.53266597F), 0.0F, (-0.53266597F), (-0.53266597F), (-0.53266597F), (-0.53266597F));
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-0.53266597F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere1.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.ka, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.nt, 0.01F);
      assertTrue(boolean0);
      assertEquals((-0.53266597F), oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
      assertEquals((-0.0020888816F), oldV_Surface0.kr, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.ib, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.kd, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.ir, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.kt, 0.01F);
      assertEquals((-0.53266597F), oldV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(9.181783F, 9.181783F, (-1092.0F));
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 9.181783F, (-1092.0F), 0.008407632F);
      oldV_Light0.lvec.normalize();
      assertEquals(0.008407632F, oldV_Vector3D0.x, 0.01F);
      assertEquals((-0.9999293F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-953.8174F), (-953.8174F), (-953.8174F));
      oldV.Light oldV_Light0 = new oldV.Light((-2322), oldV_Vector3D0, (-953.8174F), (-953.8174F), (-953.8174F));
      oldV.Light oldV_Light1 = new oldV.Light(0, oldV_Light0.lvec, (-953.8174F), (-953.8174F), (-953.8174F));
      assertEquals((-2322), oldV_Light0.lightType);
      assertEquals((-953.8174F), oldV_Light1.ig, 0.01F);
      assertEquals((-953.8174F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-953.8174F), oldV_Vector3D0.y, 0.01F);
      assertEquals((-953.8174F), oldV_Light1.ir, 0.01F);
      assertEquals((-953.8174F), oldV_Light1.ib, 0.01F);
      assertEquals((-953.8174F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(9.181783F, 9.181783F, (-1092.0F));
      oldV.Surface oldV_Surface0 = new oldV.Surface((-1092.0F), 9.181783F, (-1092.0F), (-1092.0F), (-1092.0F), 9.181783F, (-1092.0F), 9.181783F, 9.181783F, 9.181783F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 9.181783F);
      oldV_Sphere0.radSqr = (-1092.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals((-1092.0F), oldV_Surface0.ib, 0.01F);
      assertEquals((-1092.0F), oldV_Surface0.ir, 0.01F);
      assertEquals((-1092.0F), oldV_Surface0.kd, 0.01F);
      assertFalse(boolean0);
      assertEquals(9.181783F, oldV_Surface0.nt, 0.01F);
      assertEquals((-1092.0F), oldV_Surface0.ka, 0.01F);
      assertEquals((-1092.0F), oldV_Surface0.ns, 0.01F);
      assertEquals(9.181783F, oldV_Vector3D0.x, 0.01F);
      assertEquals(9.181783F, oldV_Surface0.ks, 0.01F);
      assertEquals(9.181783F, oldV_Surface0.kt, 0.01F);
      assertEquals(9.181783F, oldV_Surface0.ig, 0.01F);
      assertEquals(0.036006913F, oldV_Surface0.kr, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
