/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:23:53 GMT 2024
 */

package benchmarks.raytrace.light.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.light.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(4232.0F, 4232.0F, 4232.0F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.57735026F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1022), (-431.81F), (-1022));
      newV.Light newV_Light0 = new newV.Light((-1022), newV_Vector3D0, 1345.0F, 0.0F, (-4201.27F));
      assertEquals(1345.0F, newV_Light0.ir, 0.01F);
      assertEquals((-431.81F), newV_Vector3D0.y, 0.01F);
      assertEquals((-1022.0F), newV_Vector3D0.z, 0.01F);
      assertEquals((-4201.27F), newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals((-1022.0F), newV_Vector3D0.x, 0.01F);
      assertEquals((-1022), newV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(4232.0F, 4232.0F, 4232.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV_Vector3D0.y = (-1.0F);
      newV_Vector3D1.normalize();
      newV_Vector3D0.normalize();
      newV.Surface newV_Surface0 = new newV.Surface(0.70710677F, 0.57735026F, (-920.6954F), 4232.0F, 0.57735026F, (-1.0F), 0.0F, (-1.6708572E-4F), (-1683.0F), 4232.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-920.6954F));
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 4232.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(0.57735026F, newV_Vector3D1.z, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(2149.6953F, (-326.0F), (-326.0F));
      newV.Surface newV_Surface0 = new newV.Surface(2149.6953F, 4440.282F, (-326.0F), 2149.6953F, (-1048.0F), (-326.0F), 4440.282F, 0.001F, (-326.0F), 2149.6953F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.001F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(2149.6953F, newV_Surface0.ka, 0.01F);
      assertEquals((-326.0F), newV_Surface0.ks, 0.01F);
      assertEquals(3.92156E-6F, newV_Surface0.kr, 0.01F);
      assertEquals((-326.0F), newV_Surface0.kt, 0.01F);
      assertEquals(4440.282F, newV_Surface0.ig, 0.01F);
      assertEquals((-326.0F), newV_Vector3D0.z, 0.01F);
      assertEquals((-326.0F), newV_Vector3D0.y, 0.01F);
      assertEquals(2149.6953F, newV_Surface0.nt, 0.01F);
      assertEquals(2149.6953F, newV_Surface0.ir, 0.01F);
      assertEquals(2149.6953F, newV_Vector3D0.x, 0.01F);
      assertEquals((-1048.0F), newV_Surface0.kd, 0.01F);
      assertEquals((-326.0F), newV_Surface0.ib, 0.01F);
      assertTrue(boolean0);
      assertEquals(4440.282F, newV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(2149.6953F, (-326.0F), (-326.0F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV.Surface newV_Surface0 = new newV.Surface(2149.6953F, 4440.282F, (-326.0F), 2149.6953F, (-1048.0F), (-326.0F), 4440.282F, 0.001F, (-326.0F), 2149.6953F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 0.001F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-276.99338F));
      newV_Vector3D1.normalize();
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals((-0.14827771F), newV_Vector3D1.z, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1, 4222.48F, 1);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 4222.48F, 2.3682763E-4F, 1);
      newV_Vector3D0.normalize();
      assertEquals(0.99999994F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV.Light newV_Light0 = new newV.Light(2, newV_Vector3D0, 0, 1, 0.0F);
      newV_Light0.lvec.normalize();
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(1.0F, newV_Light0.ig, 0.01F);
      assertEquals(2, newV_Light0.lightType);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 0.0F, 0, 0);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1, 4222.48F, 1);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 4222.48F, 2.3682763E-4F, 1);
      newV.Surface newV_Surface0 = new newV.Surface(1.0F, 0.99999994F, 4222.48F, 1.0F, 0.99999994F, 1, 2.3682763E-4F, 1, 0, 2.3682763E-4F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Light0.lvec, 2.3682763E-4F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(1, 1, 1);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 1);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(2.3682763E-4F, newV_Vector3D0.z, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV newV0 = new newV();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1, 4222.48F, 1);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 4222.48F, 2.3682763E-4F, 1);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Light0.lvec);
      assertEquals(0.99999994F, newV_Vector3D0.y, 0.01F);
      assertEquals(1, newV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F), (-13.721357F));
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-13.721357F), (-13.721357F), (-13.721357F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals((-13.721357F), newV_Surface0.ns, 0.01F);
      assertEquals((-13.721357F), newV_Vector3D0.x, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.ig, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.ks, 0.01F);
      assertEquals((-0.053809125F), newV_Surface0.kr, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.ka, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.nt, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.kd, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.ir, 0.01F);
      assertEquals((-13.721357F), newV_Vector3D0.z, 0.01F);
      assertEquals((-13.721357F), newV_Surface0.kt, 0.01F);
      assertTrue(boolean0);
  }
}
