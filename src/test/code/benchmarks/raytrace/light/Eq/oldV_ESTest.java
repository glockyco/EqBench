/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:22:48 GMT 2024
 */

package benchmarks.raytrace.light.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.light.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.00392156F, 0.0F, 0.00392156F);
      oldV_Vector3D0.normalize();
      assertEquals(0.70710677F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1.0F, 1.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.70710677F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1.0F, 1.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(1.0F, oldV_Vector3D1.y, 0.01F);
      assertEquals(1.0F, oldV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-717.85675F), (-717.85675F), (-717.85675F));
      oldV_Vector3D0.x = (-997.89825F);
      oldV.Light oldV_Light0 = new oldV.Light(2811, oldV_Vector3D0, (-717.85675F), 2811, (-0.70100266F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Light0.lvec);
      assertEquals((-997.89825F), oldV_Vector3D0.x, 0.01F);
      assertEquals(2811, oldV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, (-1586.6F), 2715.5325F);
      oldV.Light oldV_Light0 = new oldV.Light((-1171), oldV_Vector3D0, (-3361.489F), 0.0F, 0.0F);
      assertEquals(2715.5325F, oldV_Vector3D0.z, 0.01F);
      assertEquals((-1586.6F), oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals((-3361.489F), oldV_Light0.ir, 0.01F);
      assertEquals((-1171), oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface((-1.0F), 0.001F, (-1.0F), (-1.0F), 0.001F, 0.001F, (-533.9F), 1644.9779F, 0.001F, 0.0F);
      assertEquals(0.001F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.001F, oldV_Surface0.kd, 0.01F);
      assertEquals(0.001F, oldV_Surface0.ks, 0.01F);
      assertEquals((-533.9F), oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ka, 0.01F);
      assertEquals(6.4508796F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.001F, oldV_Surface0.ig, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ib, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(10.885F, (-2079.2F), 1630.2018F, (-2079.2F), 0.0F, 1630.2018F, 10.885F, 1630.2018F, (-2079.2F), 217.45F);
      assertEquals((-2079.2F), oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(6.3929343F, oldV_Surface0.kr, 0.01F);
      assertEquals(1630.2018F, oldV_Surface0.ks, 0.01F);
      assertEquals(10.885F, oldV_Surface0.ir, 0.01F);
      assertEquals((-2079.2F), oldV_Surface0.ka, 0.01F);
      assertEquals(10.885F, oldV_Surface0.ns, 0.01F);
      assertEquals((-2079.2F), oldV_Surface0.ig, 0.01F);
      assertEquals(217.45F, oldV_Surface0.nt, 0.01F);
      assertEquals(1630.2018F, oldV_Surface0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-717.85675F), (-717.85675F), (-717.85675F));
      oldV_Vector3D0.normalize();
      oldV.Light oldV_Light0 = new oldV.Light(2811, oldV_Vector3D0, (-717.85675F), 2811, (-0.70100266F));
      oldV.Surface oldV_Surface0 = new oldV.Surface((-0.5042794F), (-0.5042794F), (-717.85675F), (-0.5042794F), (-0.5042794F), 2811, 2811, (-0.5042794F), (-0.70100266F), (-717.85675F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Light0.lvec, (-0.5042794F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D((-0.70100266F), 1, (-0.5042794F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-717.85675F));
      boolean boolean0 = oldV_Sphere1.intersect(oldV_Sphere0);
      assertEquals((-0.57735026F), oldV_Vector3D0.x, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-717.85675F), (-717.85675F), (-717.85675F));
      oldV_Vector3D0.x = (-997.89825F);
      oldV_Vector3D0.normalize();
      oldV.Light oldV_Light0 = new oldV.Light(2811, oldV_Vector3D0, (-717.85675F), 2811, (-0.70100266F));
      oldV.Light oldV_Light1 = new oldV.Light(1, oldV_Light0.lvec, (-717.85675F), (-0.5042794F), (-0.5042794F));
      assertEquals((-0.70100266F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-0.5042794F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-717.85675F), (-717.85675F), (-717.85675F));
      oldV.Light oldV_Light0 = new oldV.Light(2811, oldV_Vector3D0, (-717.85675F), 2811, (-0.70100266F));
      oldV.Light oldV_Light1 = new oldV.Light(0, oldV_Light0.lvec, (-997.89825F), (-0.70100266F), (-0.70100266F));
      assertEquals((-717.85675F), oldV_Vector3D0.z, 0.01F);
      assertEquals((-717.85675F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-717.85675F), oldV_Vector3D0.y, 0.01F);
      assertEquals((-0.70100266F), oldV_Light0.ib, 0.01F);
      assertEquals(2811.0F, oldV_Light0.ig, 0.01F);
      assertEquals((-997.89825F), oldV_Light1.ir, 0.01F);
      assertEquals(2811, oldV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-717.85675F), (-717.85675F), (-717.85675F));
      oldV.Light oldV_Light0 = new oldV.Light(2811, oldV_Vector3D0, (-717.85675F), 2811, (-0.70100266F));
      oldV.Surface oldV_Surface0 = new oldV.Surface((-0.5042794F), (-0.5042794F), (-717.85675F), (-0.5042794F), (-0.5042794F), 2811, 2811, (-0.5042794F), (-0.70100266F), (-717.85675F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Light0.lvec, (-0.5042794F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D((-0.70100266F), 1, (-0.5042794F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-717.85675F));
      oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals((-717.85675F), oldV_Surface0.nt, 0.01F);
      assertEquals((-0.5042794F), oldV_Vector3D1.z, 0.01F);
      assertEquals((-717.85675F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-0.5042794F), oldV_Surface0.ir, 0.01F);
      assertEquals(2811, oldV_Light0.lightType);
      assertEquals((-0.5042794F), oldV_Surface0.ka, 0.01F);
      assertEquals((-717.85675F), oldV_Light0.ir, 0.01F);
      assertEquals((-0.70100266F), oldV_Surface0.kt, 0.01F);
      assertEquals(2811.0F, oldV_Surface0.ns, 0.01F);
      assertEquals((-717.85675F), oldV_Surface0.ib, 0.01F);
      assertEquals((-0.5042794F), oldV_Surface0.ig, 0.01F);
      assertEquals((-0.70100266F), oldV_Light0.ib, 0.01F);
      assertEquals((-0.5042794F), oldV_Surface0.kd, 0.01F);
      assertEquals(2811.0F, oldV_Surface0.ks, 0.01F);
      assertEquals((-0.0019775617F), oldV_Surface0.kr, 0.01F);
      assertEquals(2811.0F, oldV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
