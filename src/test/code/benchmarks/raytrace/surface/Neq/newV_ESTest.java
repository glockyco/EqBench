/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:12:59 GMT 2024
 */

package benchmarks.raytrace.surface.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.surface.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 1.0F, 0.0F);
      newV_Vector3D0.y = 0.00392156F;
      newV_Vector3D0.normalize();
      assertEquals(1.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, (-1.0F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(0.0F, newV_Vector3D1.x, 0.01F);
      assertEquals((-1.0F), newV_Vector3D1.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1.0F, (-462.886F), (-462.886F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals((-462.886F), newV_Vector3D1.z, 0.01F);
      assertEquals(1.0F, newV_Vector3D1.x, 0.01F);
      assertEquals((-462.886F), newV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1, 1, 1);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 0.004219334F, 1500.5771F, 1);
      assertEquals(0.57735026F, newV_Vector3D0.y, 0.01F);
      assertEquals(1500.5771F, newV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light((-1), newV_Vector3D0, (-1), (-1), 0.0F);
      assertEquals((-1), newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals((-1.0F), newV_Light0.ig, 0.01F);
      assertEquals((-1.0F), newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, (-2734.0F), (-1.0F), 331.56F, 0.0F, (-1.0F), (-1.0F), 0.0F, 1345.2261F, (-1.0F));
      assertEquals((-1.0F), newV_Surface0.nt, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ns, 0.01F);
      assertEquals(331.56F, newV_Surface0.ka, 0.01F);
      assertEquals(1345.2261F, newV_Surface0.kt, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(10.0F, newV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-408.4035F), (-408.4035F), 0.001F, 0.0F, (-408.4035F), 0.0F, 0.0F, 0.001F, (-408.4035F), 0.0F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1963.3F, (-408.4035F), (-408.4035F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-254.5336F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(0.0F, (-1476.0F), 1963.3F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, (-408.4035F));
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals((-408.4035F), newV_Surface0.ir, 0.01F);
      assertEquals((-408.4035F), newV_Surface0.kt, 0.01F);
      assertEquals((-1476.0F), newV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.001F, newV_Surface0.ib, 0.01F);
      assertEquals(1963.3F, newV_Vector3D0.x, 0.01F);
      assertEquals(1963.3F, newV_Vector3D1.z, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.25500056F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ns, 0.01F);
      assertEquals((-408.4035F), newV_Surface0.kd, 0.01F);
      assertEquals(10.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1120.83F), (-1120.83F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV_Vector3D1.normalize();
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, (-1.0F), 0.0F, (-1120.83F), 801.859F, 0.0F, 3181.0F, (-1027.7529F), 801.859F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-2299.0F));
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals((-0.70710677F), newV_Vector3D1.y, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 961.335F, (-1.0F), 0.0F, 961.335F, (-1.0F), (-1.0F), 0.0F, 0.0F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(961.335F, 1.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-1.0F));
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals((-1.0F), newV_Surface0.ka, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(961.335F, newV_Surface0.ks, 0.01F);
      assertEquals(1.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(10.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.kd, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ns, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(961.335F, newV_Surface0.ib, 0.01F);
      assertEquals((-255.00056F), newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals(961.335F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.y = 10.0F;
      newV_Vector3D0.normalize();
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(1.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(1, newV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 2, 0, 0.0F, 2, 0.0F, 0.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(10.0F, newV_Surface0.ig, 0.01F);
      assertEquals(2.0F, newV_Surface0.ns, 0.01F);
      assertEquals(2.0F, newV_Surface0.ka, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 0.0F, 0.0F, 0.0F);
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 2, 0, 0.0F, 2, 0.0F, 0.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Light0.lvec, 0.0F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(2.0F, newV_Surface0.ns, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals(10.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(2.0F, newV_Surface0.ka, 0.01F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV newV0 = new newV();
  }
}
