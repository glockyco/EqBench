/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:11:53 GMT 2024
 */

package benchmarks.raytrace.surface.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.surface.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1433.2F, 1433.2F, 0.0F);
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals(0.70710677F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1.0F), (-3109.3806F), (-1.0F));
      oldV_Vector3D0.normalize();
      assertEquals((-0.9999999F), oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2116.784F), (-2116.784F), (-690.8F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-2116.784F), oldV_Vector3D1.y, 0.01F);
      assertEquals((-2116.784F), oldV_Vector3D1.x, 0.01F);
      assertEquals((-690.8F), oldV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 4387.165F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(4387.165F, oldV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 1463.536F);
      oldV.Light oldV_Light0 = new oldV.Light((-2589), oldV_Vector3D0, 1357.733F, 1357.733F, (-1.0F));
      assertEquals(1357.733F, oldV_Light0.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(1463.536F, oldV_Vector3D0.z, 0.01F);
      assertEquals(1357.733F, oldV_Light0.ir, 0.01F);
      assertEquals((-1.0F), oldV_Light0.ib, 0.01F);
      assertEquals((-2589), oldV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface((-1398.0F), (-1398.0F), (-661.0605F), 0.0F, 0.0F, 1831.0F, 1674.1747F, 1479.6519F, 1674.1747F, 1831.0F);
      assertEquals((-1398.0F), oldV_Surface0.ir, 0.01F);
      assertEquals((-661.0605F), oldV_Surface0.ib, 0.01F);
      assertEquals(1831.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(1831.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(1674.1747F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(5.8025436F, oldV_Surface0.kr, 0.01F);
      assertEquals(1674.1747F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals((-1398.0F), oldV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(47.9F, 47.9F, 3223.4521F, 0.0F, 0.0F, 0.0F, 3223.4521F, 3223.4521F, 0.0F, 0.0F);
      assertEquals(12.640961F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(47.9F, oldV_Surface0.ig, 0.01F);
      assertEquals(3223.4521F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(47.9F, oldV_Surface0.ir, 0.01F);
      assertEquals(3223.4521F, oldV_Surface0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 1575.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 2217.9F, 1575.0F, 0.0F, (-166.46F), 0.0F, (-1.0F), 1786.1923F, 0.0F, 2868.3186F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-1.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D((-2060.56F), 457.73F, (-468.31052F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-468.31052F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(7.00466F, oldV_Surface0.kr, 0.01F);
      assertEquals(2868.3186F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals((-2060.56F), oldV_Vector3D1.x, 0.01F);
      assertEquals((-166.46F), oldV_Surface0.kd, 0.01F);
      assertEquals(2217.9F, oldV_Surface0.ig, 0.01F);
      assertEquals(457.73F, oldV_Vector3D1.y, 0.01F);
      assertEquals((-468.31052F), oldV_Vector3D1.z, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ns, 0.01F);
      assertEquals(1575.0F, oldV_Surface0.ib, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 841.2828F, 1017.1427F, 0.0F, 0.0F, 841.2828F, 0.0F, (-212.0F), 0.0F, 1017.1427F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.0F, 1.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-336.695F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(1017.1427F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.x, 0.01F);
      assertEquals(1.0F, oldV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertEquals((-0.8313707F), oldV_Surface0.kr, 0.01F);
      assertEquals(841.2828F, oldV_Surface0.ks, 0.01F);
      assertEquals(841.2828F, oldV_Surface0.ig, 0.01F);
      assertEquals(1017.1427F, oldV_Surface0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(3.4486775F, 3.4486775F, (-17.773117F));
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals(0.18712151F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Light oldV_Light0 = new oldV.Light(2, (oldV.Vector3D) null, 2, 2, 2);
      assertEquals(2.0F, oldV_Light0.ig, 0.01F);
      assertEquals(2, oldV_Light0.lightType);
      assertEquals(2.0F, oldV_Light0.ir, 0.01F);
      assertEquals(2.0F, oldV_Light0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1, 1, 1);
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 0.57735026F, 0.57735026F, 0.57735026F);
      oldV.Light oldV_Light1 = new oldV.Light(0, oldV_Light0.lvec, 1.0F, 0, 0.57735026F);
      assertEquals(0.57735026F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Light1.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      oldV oldV0 = new oldV();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F, 3.4486775F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(3.4486775F, 3.4486775F, (-17.773117F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 3.4486775F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 3.4486775F);
      oldV_Sphere1.radSqr = (-17.773117F);
      boolean boolean0 = oldV_Sphere1.intersect(oldV_Sphere0);
      assertEquals(3.4486775F, oldV_Surface0.ib, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.kd, 0.01F);
      assertFalse(boolean0);
      assertEquals(3.4486775F, oldV_Surface0.ig, 0.01F);
      assertEquals(3.4486775F, oldV_Vector3D0.y, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.ka, 0.01F);
      assertEquals(3.4486775F, oldV_Vector3D0.x, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.ir, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.kt, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.013524196F, oldV_Surface0.kr, 0.01F);
      assertEquals((-17.773117F), oldV_Vector3D0.z, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.ns, 0.01F);
      assertEquals(3.4486775F, oldV_Surface0.nt, 0.01F);
  }
}
