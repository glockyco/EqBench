/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:10:46 GMT 2024
 */

package benchmarks.raytrace.surface.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.surface.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1900.7758F, 1900.7758F, 1900.7758F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.57735026F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1.0F), 274.6F, 0.0F);
      newV_Vector3D0.normalize();
      assertEquals(0.9999934F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-309.1F), (-309.1F), 504.7689F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals((-309.1F), newV_Vector3D1.y, 0.01F);
      assertEquals((-309.1F), newV_Vector3D1.x, 0.01F);
      assertEquals(504.7689F, newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.00392156F, 0.0F, 0.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(0.00392156F, newV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1900.7758F, 1900.7758F, 1900.7758F);
      newV.Light newV_Light0 = new newV.Light((-1076), newV_Vector3D0, 223.78574F, 0.0F, 1900.7758F);
      assertEquals(1900.7758F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals((-1076), newV_Light0.lightType);
      assertEquals(1900.7758F, newV_Vector3D0.x, 0.01F);
      assertEquals(223.78574F, newV_Light0.ir, 0.01F);
      assertEquals(1900.7758F, newV_Vector3D0.z, 0.01F);
      assertEquals(1900.7758F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(353.693F, 353.693F, 353.693F, 0.0F, 626.0F, 0.0F, 1341.555F, 626.0F, (-1591.3519F), 0.0F);
      assertEquals((-1591.3519F), newV_Surface0.kt, 0.01F);
      assertEquals(1341.555F, newV_Surface0.ns, 0.01F);
      assertEquals(353.693F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(626.0F, newV_Surface0.kd, 0.01F);
      assertEquals(2.4548965F, newV_Surface0.kr, 0.01F);
      assertEquals(353.693F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(353.693F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 645.16626F, 0.00392156F, 0.0F, 0.00392156F, 0.0F, 0.00392156F, 645.16626F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.00392156F, newV_Surface0.kd, 0.01F);
      assertEquals(0.00392156F, newV_Surface0.kt, 0.01F);
      assertEquals(0.00392156F, newV_Surface0.ns, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(645.16626F, newV_Surface0.nt, 0.01F);
      assertEquals(645.16626F, newV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1900.7758F, 1900.7758F, 1900.7758F);
      newV.Surface newV_Surface0 = new newV.Surface(2435.0F, 0.0F, (-1113.1F), 0.0F, 0.00392156F, 0.0F, (-1076), 0.7058225F, 0.00392156F, 0.7058225F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-2209.5317F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(1, 0.00392156F, 1);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 0.00392156F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(0.7058225F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0027679254F, newV_Surface0.kr, 0.01F);
      assertEquals(0.00392156F, newV_Vector3D1.y, 0.01F);
      assertEquals(2435.0F, newV_Surface0.ir, 0.01F);
      assertEquals((-1076.0F), newV_Surface0.ns, 0.01F);
      assertEquals(1.0F, newV_Vector3D1.z, 0.01F);
      assertEquals(1.0F, newV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals(0.00392156F, newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertFalse(boolean0);
      assertEquals((-1113.1F), newV_Surface0.ib, 0.01F);
      assertEquals(0.00392156F, newV_Surface0.kd, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1900.7758F, 1900.7758F, 1900.7758F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(1900.7758F, newV_Vector3D1.x, 0.01F);
      
      newV_Vector3D1.x = 162.23268F;
      newV.Surface newV_Surface0 = new newV.Surface(2435.0F, 0.0F, (-1113.1F), 0.0F, 0.00392156F, 0.0F, (-1076), 0.7058225F, 0.00392156F, 0.7058225F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, (-2209.5317F));
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.00392156F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(3833, newV_Vector3D0, 3833, 0.0F, 0.0F);
      newV_Vector3D0.z = (float) 1;
      newV_Light0.lvec.normalize();
      assertEquals(1.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(3833.0F, newV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 0.0F, 1, 1);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(1.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(1.0F, newV_Light0.ig, 0.01F);
      assertEquals(1, newV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(3833, newV_Vector3D0, 3833, 0.0F, 0.0F);
      newV.Light newV_Light1 = new newV.Light(0, newV_Light0.lvec, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(3833.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(3833, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere((newV.Surface) null, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertTrue(boolean0);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1335.4474F, 1335.4474F, 1335.4474F);
      newV.Surface newV_Surface0 = new newV.Surface(1335.4474F, 0.5773503F, 1335.4474F, 1335.4474F, 1335.4474F, 1335.4474F, 0.5773503F, 1335.4474F, 1335.4474F, 1335.4474F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.5773503F);
      assertEquals(0.5773503F, newV_Surface0.ns, 0.01F);
      assertEquals(5.237037F, newV_Surface0.kr, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.kd, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.ib, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.kt, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.ir, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.ks, 0.01F);
      assertEquals(0.5773503F, newV_Surface0.ig, 0.01F);
      assertEquals(1335.4474F, newV_Vector3D0.y, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.nt, 0.01F);
      assertEquals(1335.4474F, newV_Surface0.ka, 0.01F);
      assertEquals(1335.4474F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      newV newV0 = new newV();
  }
}
