/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:09:39 GMT 2024
 */

package benchmarks.raytrace.surface.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.surface.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1.0F), (-1.0F), (-1.0F));
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals((-0.57735026F), oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, (-1.0F));
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, (-1.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(0.0F, oldV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.y, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1.0F), (-367.0F), (-1.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-1.0F), oldV_Vector3D1.x, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D1.z, 0.01F);
      assertEquals((-367.0F), oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1), (-1), (-1));
      oldV.Light oldV_Light0 = new oldV.Light((-1), oldV_Vector3D0, 0.0F, (-3983.68F), 0.0F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-1), oldV_Light0.lightType);
      assertEquals((-3983.68F), oldV_Light0.ig, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.z, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.00392156F, 0.00392156F, 0.00392156F, 0.00392156F, 0.00392156F, (-1.0F), (-2966.433F), (-1.0F), 0.00392156F, 0.00392156F);
      assertEquals((-2966.433F), oldV_Surface0.ns, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.kd, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.nt, 0.01F);
      assertEquals((-0.00392156F), oldV_Surface0.kr, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.ig, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, (-830.61487F), 0.0F, (-125.09356F), 844.63F, (-830.61487F), (-125.09356F), (-830.61487F), (-830.61487F), (-830.61487F));
      assertEquals((-125.09356F), oldV_Surface0.ka, 0.01F);
      assertEquals((-3.257306F), oldV_Surface0.kr, 0.01F);
      assertEquals((-830.61487F), oldV_Surface0.ks, 0.01F);
      assertEquals((-830.61487F), oldV_Surface0.kt, 0.01F);
      assertEquals((-830.61487F), oldV_Surface0.ig, 0.01F);
      assertEquals((-125.09356F), oldV_Surface0.ns, 0.01F);
      assertEquals((-830.61487F), oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(844.63F, oldV_Surface0.kd, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1.0F), (-1.0F), (-1.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-761.38F), (-1.0F), (-1.0F));
      oldV_Vector3D0.normalize();
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-1.0F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals((-0.57735026F), oldV_Vector3D0.z, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2356.0317F), 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(2146570600, oldV_Vector3D0, 0.0F, 2146570600, (-2356.0317F));
      oldV.Surface oldV_Surface0 = new oldV.Surface(2146570600, 0, 0.0F, (-2356.0317F), 0, 2146570600, (-2356.0317F), 2146570600, (-2356.0317F), 2146570600);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Light0.lvec, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertTrue(boolean0);
      assertEquals(8417906.0F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
      assertEquals(2.14657062E9F, oldV_Light0.ig, 0.01F);
      assertEquals((-2356.0317F), oldV_Surface0.ka, 0.01F);
      assertEquals((-2356.0317F), oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertEquals(2146570600, oldV_Light0.lightType);
      assertEquals((-2356.0317F), oldV_Vector3D0.x, 0.01F);
      assertEquals(2.14657062E9F, oldV_Surface0.nt, 0.01F);
      assertEquals(2.14657062E9F, oldV_Surface0.ir, 0.01F);
      assertEquals(2.14657062E9F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals((-2356.0317F), oldV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1389.68F), (-1389.68F), (-1389.68F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D((-1389.68F), 1772.4294F, 1.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere((oldV.Surface) null, oldV_Vector3D1, (-1101.8201F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere((oldV.Surface) null, oldV_Vector3D0, (-1101.8201F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(1.0F, oldV_Vector3D1.z, 0.01F);
      assertEquals((-1389.68F), oldV_Vector3D1.x, 0.01F);
      assertFalse(boolean0);
      assertEquals(1772.4294F, oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0, 0, 0);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2356.0317F), 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(2146570600, oldV_Vector3D0, 0.0F, 2146570600, (-2356.0317F));
      oldV.Light oldV_Light1 = new oldV.Light(1, oldV_Light0.lvec, 2, 0.0F, 8417906.0F);
      oldV_Light0.lvec.normalize();
      assertEquals((-1.0F), oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0, 0, 0);
      oldV.Light oldV_Light0 = new oldV.Light(0, oldV_Vector3D0, 0.0F, 0, 0.0F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0, oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
