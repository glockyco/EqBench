/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:01:59 GMT 2024
 */

package benchmarks.raytrace.intersect.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.intersect.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 1257.1F, 1257.1F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.70710677F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 1257.1F, 1257.1F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(1257.1F, newV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.x, 0.01F);
      assertEquals(1257.1F, newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-597.0F), 0.0F, (-1246.634F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(0.0F, newV_Vector3D1.y, 0.01F);
      assertEquals((-597.0F), newV_Vector3D1.x, 0.01F);
      assertEquals((-1246.634F), newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Light newV_Light0 = new newV.Light((-1), (newV.Vector3D) null, (-1.0F), (-1.0F), (-1038.1F));
      assertEquals((-1.0F), newV_Light0.ir, 0.01F);
      assertEquals((-1), newV_Light0.lightType);
      assertEquals((-1038.1F), newV_Light0.ib, 0.01F);
      assertEquals((-1.0F), newV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-1.0F), 1.0F, (-0.57735026F), (-0.57735026F), (-261.7F), (-3264.85F), (-3264.85F), 0.0F, (-1.0F), (-1.0F));
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals((-3264.85F), newV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), newV_Surface0.nt, 0.01F);
      assertEquals(1.0F, newV_Surface0.ig, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ir, 0.01F);
      assertEquals((-0.57735026F), newV_Surface0.ib, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kt, 0.01F);
      assertEquals((-261.7F), newV_Surface0.kd, 0.01F);
      assertEquals((-0.57735026F), newV_Surface0.ka, 0.01F);
      assertEquals((-3264.85F), newV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV_Vector3D1.z = 1.0F;
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 1.0F);
      boolean boolean0 = newV_Sphere1.intersect(newV_Sphere0);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.kd, 0.01F);
      assertEquals(1.0F, newV_Surface0.ns, 0.01F);
      assertEquals(1.0F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-2424.0F), (-2424.0F), (-2424.0F));
      newV.Surface newV_Surface0 = new newV.Surface((-2424.0F), 0.0F, 0.0F, 0.0F, (-0.57735026F), 0.0F, 0.0F, 0.0F, 0.0F, (-457.7314F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D((-0.57735026F), 0.0F, 0.00392156F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, (-457.7314F));
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.001F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals((-0.57735026F), newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(0.00392156F, newV_Vector3D1.z, 0.01F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-457.7314F), newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals((-2424.0F), newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ns, 0.01F);
      assertEquals((-0.57735026F), newV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 158.039F, 85.9415F, (-1.0F));
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.61975944F, (-1.0F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(0.61975944F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals((-1.0F), newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertTrue(boolean0);
      assertEquals(85.9415F, newV_Surface0.kt, 0.01F);
      assertEquals(0.61975944F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ns, 0.01F);
      assertEquals((-1.0F), newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, (-1246.634F), (-1246.634F), 0.0F, (-1246.634F), (-1246.634F), (-1246.634F), 0.0F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-597.0F), 0.0F, (-1246.634F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-597.0F));
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals((-1246.634F), newV_Vector3D0.z, 0.01F);
      assertEquals((-1246.634F), newV_Surface0.kd, 0.01F);
      assertEquals((-1246.634F), newV_Surface0.kt, 0.01F);
      assertEquals((-4.88875F), newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals((-597.0F), newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertTrue(boolean0);
      assertEquals((-1246.634F), newV_Surface0.ka, 0.01F);
      assertEquals((-1246.634F), newV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV_Vector3D1.z = 1.0F;
      newV_Vector3D1.normalize();
      assertEquals(1.0F, newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.normalize();
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Light newV_Light0 = new newV.Light(2, (newV.Vector3D) null, 0, 1546.0F, 1);
      assertEquals(2, newV_Light0.lightType);
      assertEquals(1.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(1546.0F, newV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1, 7775.229F, (-875.62F));
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 1097.8223F, 79.0F, (-875.62F));
      assertEquals(0.9937184F, newV_Vector3D0.y, 0.01F);
      assertEquals(1, newV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1546.0F, 1546.0F, 1546.0F);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 1546.0F, 1546.0F, 1546.0F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals(1546.0F, newV_Light0.ir, 0.01F);
      assertEquals(1546.0F, newV_Light0.ib, 0.01F);
      assertEquals(1546.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(1546.0F, newV_Light0.ig, 0.01F);
      assertEquals(1546.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(1546.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      newV newV0 = new newV();
  }
}
