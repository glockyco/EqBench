/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:00:54 GMT 2024
 */

package benchmarks.raytrace.intersect.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.intersect.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.001F);
      oldV_Vector3D0.normalize();
      assertEquals(1.0F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1509.9F, 1.0F, 1.0F);
      oldV_Vector3D0.normalize();
      assertEquals(6.622952E-4F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1251.4869F), (-820.6741F), (-820.6741F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-820.6741F), oldV_Vector3D1.z, 0.01F);
      assertEquals((-820.6741F), oldV_Vector3D1.y, 0.01F);
      assertEquals((-1251.4869F), oldV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1), 0.00392156F, (-1));
      oldV.Light oldV_Light0 = new oldV.Light((-1), oldV_Vector3D0, 1.0F, (-1.0F), (-1.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Light0.lvec);
      assertEquals((-1.0F), oldV_Light0.ig, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D1.x, 0.01F);
      assertEquals((-1), oldV_Light0.lightType);
      assertEquals(0.00392156F, oldV_Vector3D1.y, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D1.z, 0.01F);
      assertEquals(1.0F, oldV_Light0.ir, 0.01F);
      assertEquals((-1.0F), oldV_Light0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 3128.49F, 3128.49F, 3128.49F, (-1.0F), (-1.0F));
      assertEquals(12.268561F, oldV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(3128.49F, oldV_Surface0.ks, 0.01F);
      assertEquals(3128.49F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertTrue(boolean0);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-3257.25F), (-1521.5011F), (-1521.5011F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.0F, 0.0F, 0.001F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere((oldV.Surface) null, oldV_Vector3D1, 0.0F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere((oldV.Surface) null, oldV_Vector3D0, (-1521.5011F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals((-1521.5011F), oldV_Vector3D0.y, 0.01F);
      assertEquals(0.001F, oldV_Vector3D1.z, 0.01F);
      assertFalse(boolean0);
      assertEquals((-3257.25F), oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1.0F, 1.0F, 1.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(433.7525F, 0.57735026F, 1.0F, 0.57735026F, 0.0F, 0.57735026F, 0.57735026F, 1720.3F, (-1.0F), 1.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.57735026F, (-1.0F), 0.57735026F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 2316.794F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-1147.0F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertTrue(boolean0);
      assertEquals(0.57735026F, oldV_Surface0.ig, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.57735026F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.57735026F, oldV_Surface0.ks, 0.01F);
      assertEquals(6.7462597F, oldV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.kt, 0.01F);
      assertEquals(1.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.57735026F, oldV_Surface0.ka, 0.01F);
      assertEquals(433.7525F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.57735026F, oldV_Vector3D1.z, 0.01F);
      assertEquals(0.57735026F, oldV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, (-1.0F), 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light((-14), oldV_Vector3D0, 0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light1 = new oldV.Light(0, oldV_Light0.lvec, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, oldV_Light1.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Light1.ib, 0.01F);
      assertEquals(0.0F, oldV_Light1.ir, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals((-14), oldV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-25), (-25), (-25));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 1, (-25.0F), 0);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-25.0F), (-0.57735026F), (-25), (-25.0F), (-0.57735026F), (-0.57735026F), (-0.57735026F), (-0.57735026F), 0.0F, (-25));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-0.57735026F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-0.57735026F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals((-0.57735026F), oldV_Vector3D0.z, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F), (-1.0F));
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, (-1.0F), 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-1.0F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
