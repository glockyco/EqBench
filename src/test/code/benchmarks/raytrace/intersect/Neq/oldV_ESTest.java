/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:03:04 GMT 2024
 */

package benchmarks.raytrace.intersect.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.intersect.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.001F, 0.001F, 0.00392156F);
      oldV_Vector3D0.normalize();
      assertEquals(0.94069976F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1572.25F), (-1572.25F), (-1572.25F));
      oldV.Light oldV_Light0 = new oldV.Light((-1), oldV_Vector3D0, (-1572.25F), 1610.3809F, 863.29315F);
      assertEquals((-1572.25F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-1572.25F), oldV_Light0.ir, 0.01F);
      assertEquals((-1), oldV_Light0.lightType);
      assertEquals(863.29315F, oldV_Light0.ib, 0.01F);
      assertEquals(1610.3809F, oldV_Light0.ig, 0.01F);
      assertEquals((-1572.25F), oldV_Vector3D0.y, 0.01F);
      assertEquals((-1572.25F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(491.7444F, 993.25806F, 491.7444F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.81917346F, 0.4055582F, 0.4055582F, 0.4055582F, 0.4055582F, 0.81917346F, 0.0F, 0.4055582F, 0.0F, 0.4055582F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.81917346F);
      oldV_Sphere0.radSqr = 0.0F;
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0015904208F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.81917346F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.81917346F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.4055582F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.4055582F, oldV_Surface0.ig, 0.01F);
      assertEquals(491.7444F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.4055582F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.4055582F, oldV_Surface0.ib, 0.01F);
      assertEquals(491.7444F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.4055582F, oldV_Surface0.kd, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface((-535.7343F), 0.001F, (-535.7343F), (-2059.6F), (-2460.82F), (-2065.4F), (-535.7343F), (-2460.82F), 0.001F, 0.0F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.001F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-2059.6F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.001F, (-2065.4F), 2081.7515F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(2081.7515F, oldV_Vector3D1.z, 0.01F);
      assertEquals((-535.7343F), oldV_Surface0.ir, 0.01F);
      assertEquals((-2065.4F), oldV_Vector3D1.y, 0.01F);
      assertEquals((-2059.6F), oldV_Surface0.ka, 0.01F);
      assertEquals(0.001F, oldV_Surface0.kt, 0.01F);
      assertEquals((-2460.82F), oldV_Surface0.kd, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals((-9.650253F), oldV_Surface0.kr, 0.01F);
      assertEquals(0.001F, oldV_Vector3D1.x, 0.01F);
      assertEquals(0.001F, oldV_Surface0.ig, 0.01F);
      assertEquals((-535.7343F), oldV_Surface0.ib, 0.01F);
      assertFalse(boolean0);
      assertEquals((-2065.4F), oldV_Surface0.ks, 0.01F);
      assertEquals((-535.7343F), oldV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0, 0, 683.89F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV_Vector3D0.normalize();
      oldV.Vector3D oldV_Vector3D2 = new oldV.Vector3D(oldV_Vector3D1);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-227.15F), 0.0F, 0.0F, (-276.4829F), 3073.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 1);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-2758.5496F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D2, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(0.99999994F, oldV_Vector3D0.z, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(491.7444F, 993.25806F, 491.7444F);
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals(0.4055582F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1693.0687F), (-1693.0687F), (-1693.0687F));
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 0, 2, (-1693.0687F));
      assertEquals((-0.5773503F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-0.5773503F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1693.0687F), (-1693.0687F), (-1693.0687F));
      oldV.Light oldV_Light0 = new oldV.Light(0, oldV_Vector3D0, (-0.5773503F), (-1693.0687F), (-0.5773503F));
      assertEquals((-1693.0687F), oldV_Light0.ig, 0.01F);
      assertEquals((-1693.0687F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-0.5773503F), oldV_Light0.ir, 0.01F);
      assertEquals((-0.5773503F), oldV_Light0.ib, 0.01F);
      assertEquals(0, oldV_Light0.lightType);
      assertEquals((-1693.0687F), oldV_Vector3D0.z, 0.01F);
      assertEquals((-1693.0687F), oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1693.0687F), (-1693.0687F), (-1693.0687F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D((-0.5773503F), (-1693.0687F), (-0.5773503F));
      oldV.Light oldV_Light0 = new oldV.Light(2534, oldV_Vector3D0, (-1693.0687F), (-0.5773503F), 2534);
      oldV.Vector3D oldV_Vector3D2 = new oldV.Vector3D(oldV_Vector3D1);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-0.5773503F), 1, (-0.5773503F), 1, (-1693.0687F), (-0.5773503F), (-1693.0687F), (-0.5773503F), (-0.5773503F), (-0.5773503F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D2, (-0.5773503F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Light0.lvec, (-0.5773503F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals((-0.5773503F), oldV_Surface0.ib, 0.01F);
      assertEquals((-0.5773503F), oldV_Surface0.nt, 0.01F);
      assertEquals((-1693.0687F), oldV_Vector3D2.y, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ig, 0.01F);
      assertEquals(2534.0F, oldV_Light0.ib, 0.01F);
      assertFalse(boolean0);
      assertEquals((-0.5773503F), oldV_Light0.ig, 0.01F);
      assertEquals((-0.5773503F), oldV_Surface0.ir, 0.01F);
      assertEquals((-0.5773503F), oldV_Surface0.kt, 0.01F);
      assertEquals((-1693.0687F), oldV_Surface0.ns, 0.01F);
      assertEquals((-0.5773503F), oldV_Surface0.ks, 0.01F);
      assertEquals((-0.5773503F), oldV_Vector3D2.z, 0.01F);
      assertEquals((-0.5773503F), oldV_Vector3D2.x, 0.01F);
      assertEquals((-1693.0687F), oldV_Light0.ir, 0.01F);
      assertEquals(2534, oldV_Light0.lightType);
      assertEquals((-0.0022641139F), oldV_Surface0.kr, 0.01F);
      assertEquals((-1693.0687F), oldV_Surface0.kd, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
