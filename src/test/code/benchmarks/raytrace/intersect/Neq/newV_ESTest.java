/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:04:09 GMT 2024
 */

package benchmarks.raytrace.intersect.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.intersect.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(125.4F, 125.4F, 125.4F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.57735026F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1616), (-1616), (-1616));
      newV.Light newV_Light0 = new newV.Light((-1616), newV_Vector3D0, (-842.2659F), (-842.2659F), 0.0F);
      assertEquals((-1616.0F), newV_Vector3D0.z, 0.01F);
      assertEquals((-842.2659F), newV_Light0.ig, 0.01F);
      assertEquals((-1616), newV_Light0.lightType);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals((-1616.0F), newV_Vector3D0.x, 0.01F);
      assertEquals((-842.2659F), newV_Light0.ir, 0.01F);
      assertEquals((-1616.0F), newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-4294.004F), 185.905F, (-183.0F));
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, (-183.0F), 1, 388.0F);
      assertEquals((-0.04253914F), newV_Vector3D0.z, 0.01F);
      assertEquals((-0.99815977F), newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F));
      assertEquals((-1.0F), newV_Surface0.ka, 0.01F);
      assertEquals((-1.0F), newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ns, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ir, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kd, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, (-2971.1255F), 0.0F, 0.0F, 1408.07F, 1.0F, 1.0F, 0.0F, (-1003.7F), (-1.0F));
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1.0F), 1408.07F, (-900.7207F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV_Vector3D1.normalize();
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, (-427.0F));
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals((-0.53886515F), newV_Vector3D1.z, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-232.52179F), (-232.52179F), (-232.52179F), (-232.52179F), (-232.52179F), 2147.0632F, 2147.0632F, (-4087.5159F), 1.0F, 0.0F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-232.52179F), 175.88F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(175.88F, newV_Vector3D0.y, 0.01F);
      assertEquals((-232.52179F), newV_Surface0.ir, 0.01F);
      assertTrue(boolean0);
      assertEquals((-232.52179F), newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals((-232.52179F), newV_Surface0.ka, 0.01F);
      assertEquals(2147.0632F, newV_Surface0.ks, 0.01F);
      assertEquals(1.0F, newV_Surface0.kt, 0.01F);
      assertEquals(2147.0632F, newV_Surface0.ns, 0.01F);
      assertEquals((-232.52179F), newV_Surface0.ig, 0.01F);
      assertEquals((-232.52179F), newV_Surface0.ib, 0.01F);
      assertEquals((-16.029438F), newV_Surface0.kr, 0.01F);
      assertEquals((-232.52179F), newV_Surface0.kd, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.normalize();
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-1.0F), (-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1.0F), 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-1.0F));
      boolean boolean0 = newV_Sphere1.intersect(newV_Sphere0);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ig, 0.01F);
      assertEquals((-1.0F), newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals((-1.0F), newV_Surface0.nt, 0.01F);
      assertEquals((-0.00392156F), newV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ns, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kt, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1.0F), 0.0F);
      newV_Vector3D0.normalize();
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals((-1.0F), newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV newV0 = new newV();
  }
}
