/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:07:27 GMT 2024
 */

package benchmarks.raytrace.raytrace.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.raytrace.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1784.2609F), (-1336.4F), (-1336.4F));
      oldV_Vector3D0.z = (-1336.4F);
      oldV_Vector3D0.x = 0.0F;
      oldV_Vector3D0.x = 0.0F;
      oldV_Vector3D0.x = 0.00392156F;
      oldV_Vector3D0.y = (-1336.4F);
      oldV_Vector3D0.z = 0.0F;
      oldV_Vector3D0.y = 0.0F;
      oldV_Vector3D0.normalize();
      assertEquals(1.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2991.0386F), 0.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(0.0F, oldV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
      assertEquals((-2991.0386F), oldV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1379), 730.7437F, 0.00392156F);
      oldV.Light oldV_Light0 = new oldV.Light((-1379), oldV_Vector3D0, 0.0F, 0.0F, (-1379.0F));
      assertEquals((-1379.0F), oldV_Light0.ib, 0.01F);
      assertEquals(0.00392156F, oldV_Vector3D0.z, 0.01F);
      assertEquals(730.7437F, oldV_Vector3D0.y, 0.01F);
      assertEquals((-1379.0F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-1379), oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(2858.5708F, 1.0F, 145.6F, 145.6F, 0.00392156F, 1.0F, 0.00392156F, 145.6F, 145.6F, 0.0F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 145.6F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV_Vector3D1.y = (-390.71F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 1164.6057F);
      oldV_Sphere0.center = oldV_Vector3D0;
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 1.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(145.6F, oldV_Vector3D1.z, 0.01F);
      assertEquals(2858.5708F, oldV_Surface0.ir, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ig, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.kd, 0.01F);
      assertEquals(145.6F, oldV_Surface0.kt, 0.01F);
      assertEquals(145.6F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.ns, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.5709792F, oldV_Surface0.kr, 0.01F);
      assertEquals(145.6F, oldV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2013.071F), (-2507.484F), 381.5511F);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-1.0F), 381.5511F, (-1.0F), 1.0F, 381.5511F, (-1.0F), 0.0F, 381.5511F, 1135.1064F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      oldV_Sphere0.radSqr = 1135.1064F;
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertTrue(boolean0);
      assertEquals((-1.0F), oldV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ir, 0.01F);
      assertEquals(1.4962754F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(381.5511F, oldV_Surface0.ig, 0.01F);
      assertEquals(1135.1064F, oldV_Surface0.kt, 0.01F);
      assertEquals((-2013.071F), oldV_Vector3D0.x, 0.01F);
      assertEquals(381.5511F, oldV_Vector3D0.z, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ib, 0.01F);
      assertEquals(381.5511F, oldV_Surface0.kd, 0.01F);
      assertEquals((-2507.484F), oldV_Vector3D0.y, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1598.81F, 1598.81F, (-121.379F));
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals((-0.053605184F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(1, oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2013.071F), (-2507.484F), 381.5511F);
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 0.117830545F, 977.2335F, (-2008.9084F));
      assertEquals((-0.7743608F), oldV_Vector3D0.y, 0.01F);
      assertEquals(0.117830545F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(0, oldV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0, oldV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(1598.81F, 1598.81F, 1598.81F, 1598.81F, 1598.81F, 1598.81F, 1598.81F, 0.0F, 0.0F, 1598.81F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1598.81F, 1598.81F, (-121.379F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 0.0F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      oldV_Vector3D1.normalize();
      oldV_Sphere1.intersect(oldV_Sphere0);
      assertEquals((-0.053605184F), oldV_Vector3D1.z, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV oldV0 = new oldV();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(1598.81F, 1598.81F, 1598.81F, 1598.81F, 1598.81F, 1598.81F, 1598.81F, 0.0F, 0.0F, 1598.81F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1598.81F, 1598.81F, (-121.379F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(1598.81F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.ka, 0.01F);
      assertEquals(1598.81F, oldV_Vector3D0.x, 0.01F);
      assertEquals(1598.81F, oldV_Vector3D0.y, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.ig, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.ib, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.kd, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.nt, 0.01F);
      assertEquals(1598.81F, oldV_Surface0.ns, 0.01F);
      assertEquals((-121.379F), oldV_Vector3D0.z, 0.01F);
      assertTrue(boolean0);
      assertEquals(1598.81F, oldV_Surface0.ks, 0.01F);
  }
}
