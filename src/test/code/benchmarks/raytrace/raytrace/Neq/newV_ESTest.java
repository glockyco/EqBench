/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:08:33 GMT 2024
 */

package benchmarks.raytrace.raytrace.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.raytrace.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1796.2267F), 0.0F);
      newV_Vector3D0.normalize();
      assertEquals((-3226430.2F), newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.x = 1561.6301F;
      newV_Vector3D0.normalize();
      assertEquals(2438688.8F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.normalize();
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(Float.NaN, newV_Vector3D0.z, 0.01F);
      assertEquals(Float.NaN, newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      
      newV_Vector3D0.x = 1561.6301F;
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(1561.6301F, newV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(4667970.0F, 4667970.0F, 4667970.0F);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 4667970.0F, 1, 4667970.0F);
      assertEquals(1, newV_Light0.lightType);
      assertEquals(1.0F, newV_Light0.ig, 0.01F);
      assertEquals(4667970.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(4667970.0F, newV_Light0.ir, 0.01F);
      assertEquals(4667970.0F, newV_Light0.ib, 0.01F);
      assertEquals(4667970.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(4667970.0F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 2309.9768F, Float.NaN, 0.0F);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(Float.NaN, newV_Light0.ig, 0.01F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(2309.9768F, newV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, (-1433.33F), (-1433.33F), 380.9F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals((-1433.33F), newV_Surface0.ka, 0.01F);
      assertEquals((-1433.33F), newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(380.9F, newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ns, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1141.385F, 596.4459F, (-1589.3849F), 0.00392156F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-3996.3F));
      newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(Float.NaN, newV_Vector3D0.x, 0.01F);
      assertEquals(1141.385F, newV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, (-668.75433F));
      assertEquals((-668.75433F), newV_Vector3D0.z, 0.01F);
      
      newV_Vector3D0.z = 0.0F;
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, (-668.75433F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(60.0F, 60.0F, 60.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 60.0F, 2102.71F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 2102.71F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 1627.0F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-1.0F));
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(60.0F, newV_Surface0.ib, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kd, 0.01F);
      assertEquals(60.0F, newV_Surface0.kt, 0.01F);
      assertEquals(60.0F, newV_Surface0.ir, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ks, 0.01F);
      assertEquals(60.0F, newV_Surface0.ig, 0.01F);
      assertEquals(2102.71F, newV_Vector3D0.z, 0.01F);
      assertEquals(2102.71F, newV_Surface0.nt, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ns, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1141.385F, 596.4459F, (-1589.3849F), 0.00392156F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, Float.NaN);
      assertEquals(1141.385F, newV_Surface0.ks, 0.01F);
      assertEquals(596.4459F, newV_Surface0.ns, 0.01F);
      assertEquals(0.00392156F, newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals((-6.232868F), newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, (-668.75433F));
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals((-1.0F), newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1283), (-1283), (-1283));
      newV.Light newV_Light0 = new newV.Light((-1283), newV_Vector3D0, (-1283), (-1283), (-1283));
      newV.Light newV_Light1 = new newV.Light(0, newV_Light0.lvec, 2, 2, (-1283.0F));
      assertEquals((-1283), newV_Light0.lightType);
      assertEquals((-1283.0F), newV_Light1.ib, 0.01F);
      assertEquals(2.0F, newV_Light1.ir, 0.01F);
      assertEquals((-1283.0F), newV_Vector3D0.y, 0.01F);
      assertEquals((-1283.0F), newV_Vector3D0.x, 0.01F);
      assertEquals(2.0F, newV_Light1.ig, 0.01F);
      assertEquals((-1283.0F), newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV newV0 = new newV();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(2447.129F, 2447.129F, 2447.129F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(2447.129F, newV_Vector3D1.y, 0.01F);
      assertEquals(2447.129F, newV_Vector3D1.x, 0.01F);
      assertEquals(2447.129F, newV_Vector3D1.z, 0.01F);
  }
}
