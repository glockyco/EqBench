/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:05:15 GMT 2024
 */

package benchmarks.raytrace.raytrace.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.raytrace.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.001F, 0.001F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.70710677F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-158.905F), 0.0F, 166.9258F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV_Vector3D1.y = (-859.8674F);
      oldV_Vector3D1.normalize();
      assertEquals((-0.96590716F), oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1.0F), 1733.552F, (-1.0F));
      oldV.Light oldV_Light0 = new oldV.Light((-1), oldV_Vector3D0, (-1), (-1), 1733.552F);
      assertEquals(1733.552F, oldV_Vector3D0.y, 0.01F);
      assertEquals((-1.0F), oldV_Light0.ig, 0.01F);
      assertEquals(1733.552F, oldV_Light0.ib, 0.01F);
      assertEquals((-1), oldV_Light0.lightType);
      assertEquals((-1.0F), oldV_Light0.ir, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Light oldV_Light0 = new oldV.Light(617, (oldV.Vector3D) null, (-105.53822F), 617, (-1.0F));
      assertEquals((-105.53822F), oldV_Light0.ir, 0.01F);
      assertEquals((-1.0F), oldV_Light0.ib, 0.01F);
      assertEquals(617, oldV_Light0.lightType);
      assertEquals(617.0F, oldV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(255.0F, 1.0F, 1.0F, 255.0F, 255.0F, 255.0F, 1.0F, 255.0F, 255.0F, 1.0F);
      assertEquals(1.0F, oldV_Surface0.ig, 0.01F);
      assertEquals(255.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(255.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(255.0F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.9999978F, oldV_Surface0.kr, 0.01F);
      assertEquals(255.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(1.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(255.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(1.0F, oldV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, (-2570.33F), 167.0F, (-2570.33F), (-2181.9673F), 0.0F, 0.0F, (-581.6F), (-1563.7516F));
      assertEquals((-2570.33F), oldV_Surface0.kd, 0.01F);
      assertEquals((-2570.33F), oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ir, 0.01F);
      assertEquals((-581.6F), oldV_Surface0.kt, 0.01F);
      assertEquals(167.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertEquals((-2181.9673F), oldV_Surface0.ks, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertEquals((-1563.7516F), oldV_Surface0.nt, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 6399.9F, 0.0F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1.0F, 1.0F, 1651.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(1.0F, oldV_Vector3D1.x, 0.01F);
      
      oldV_Vector3D1.x = 0.0F;
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 1.0F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-299.46265F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 123.31441F, (-1337.5223F), (-158.905F));
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-158.905F), 0.0F, 166.9258F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(0.0F, oldV_Vector3D1.y, 0.01F);
      
      oldV_Vector3D1.y = (-859.8674F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 2750.8428F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2367.3733F), 0, 0);
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals((-1.0F), oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2367.3733F), 0, 0);
      oldV.Light oldV_Light0 = new oldV.Light(0, oldV_Vector3D0, (-1.0F), 0.0F, 0.0F);
      assertEquals(0, oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals((-1.0F), oldV_Light0.ir, 0.01F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals((-2367.3733F), oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Light0.lvec, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(820.0834F, 820.0834F, 820.0834F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(820.0834F, oldV_Vector3D1.z, 0.01F);
      
      oldV.Surface oldV_Surface0 = new oldV.Surface(820.0834F, 820.0834F, 820.0834F, 820.0834F, 6.5888484E12F, 820.0834F, 820.0834F, 820.0834F, 820.0834F, 820.0834F);
      oldV_Vector3D1.z = 6.5888484E12F;
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 820.0834F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 820.0834F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
