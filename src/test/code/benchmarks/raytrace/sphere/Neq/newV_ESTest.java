/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:17:21 GMT 2024
 */

package benchmarks.raytrace.sphere.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.sphere.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1), 0.0F, (-1));
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals((-0.70710677F), newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-3374.08F), 0.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(0.0F, newV_Vector3D1.z, 0.01F);
      assertEquals((-3374.08F), newV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-1395.0F), (-1395.0F), (-831.0F), (-831.0F), (-973.0F), 0.0F, (-1395.0F), 0.0F, 501.4269F, (-831.0F));
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-1395.0F), newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals((-1395.0F), newV_Surface0.ig, 0.01F);
      assertEquals((-973.0F), newV_Surface0.kd, 0.01F);
      assertEquals((-1395.0F), newV_Surface0.ns, 0.01F);
      assertEquals((-831.0F), newV_Surface0.ka, 0.01F);
      assertEquals(501.4269F, newV_Surface0.kt, 0.01F);
      assertEquals((-831.0F), newV_Surface0.nt, 0.01F);
      assertEquals((-831.0F), newV_Surface0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1880.5851F, (-1513.4839F), (-1513.4839F));
      newV.Light newV_Light0 = new newV.Light((-687), newV_Vector3D0, 1720.0F, (-716.3686F), (-1513.4839F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(2, (-1513.4839F), 0.0F);
      newV.Surface newV_Surface0 = new newV.Surface((-1513.4839F), 0.0F, 0.0F, 1880.5851F, 0.0F, (-1513.4839F), 1720.0F, 2.0F, 1880.5851F, (-1972.064F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 1880.5851F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 2.0F);
      newV_Light0.lvec.normalize();
      newV_Vector3D1.normalize();
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals((-0.9999991F), newV_Vector3D1.y, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(2671.1F, 2671.1F, 0.0F, 1927.6494F, 2671.1F, 0.0F, 1927.6494F, (-3351.0833F), (-3351.0833F), 1927.6494F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, (-1.0F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 597.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertEquals(1927.6494F, newV_Surface0.ka, 0.01F);
      assertEquals(2671.1F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-13.141474F), newV_Surface0.kr, 0.01F);
      assertEquals((-1.0F), newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals((-3351.0833F), newV_Surface0.kt, 0.01F);
      assertTrue(boolean0);
      assertEquals(1927.6494F, newV_Surface0.nt, 0.01F);
      assertEquals(1927.6494F, newV_Surface0.ns, 0.01F);
      assertEquals(2671.1F, newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(2671.1F, newV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1880.5851F, (-1513.4839F), (-1513.4839F));
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV.Light newV_Light0 = new newV.Light((-687), newV_Vector3D1, 1720.0F, (-716.3686F), (-1513.4839F));
      newV.Surface newV_Surface0 = new newV.Surface((-1513.4839F), 0.0F, 0.0F, 1880.5851F, 0.0F, (-1513.4839F), 1720.0F, 2.0F, 1880.5851F, (-1972.064F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 1880.5851F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 2.0F);
      newV_Light0.lvec.normalize();
      boolean boolean0 = newV_Sphere1.intersect(newV_Sphere0);
      assertEquals((-0.5311985F), newV_Vector3D1.z, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, 0.0F, 489.9432F, 0.0F, 0.0F, 0.0F, (-680.3598F), 0.0F, (-680.3598F), 0.0F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-680.3598F), 0.0F, (-1504.07F));
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, (-742.08F));
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals((-680.3598F), newV_Surface0.kt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ig, 0.01F);
      assertEquals((-680.3598F), newV_Vector3D0.x, 0.01F);
      assertTrue(boolean0);
      assertEquals(489.9432F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals((-680.3598F), newV_Surface0.ns, 0.01F);
      assertEquals((-1504.07F), newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1880.5851F, (-1513.4839F), (-1513.4839F));
      newV.Light newV_Light0 = new newV.Light((-687), newV_Vector3D0, 1720.0F, (-716.3686F), (-1513.4839F));
      newV_Light0.lvec.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.66004264F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.normalize();
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1, (-1357.19F), 1);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, (-1357.19F), 1, 1);
      assertEquals(7.3681615E-4F, newV_Vector3D0.x, 0.01F);
      assertEquals((-0.99999946F), newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0, 0, 0);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 0, 0, 0);
      assertEquals(0.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV newV0 = new newV();
  }
}
