/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:15:10 GMT 2024
 */

package benchmarks.raytrace.sphere.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.raytrace.sphere.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-2241.7424F), (-2241.7424F));
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals((-0.70710677F), newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(1.0F, 0.0F, (-4454.8433F));
      newV_Vector3D0.normalize();
      assertEquals((-1.0F), newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1125.0F), 0.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(0.0F, newV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D1.z, 0.01F);
      assertEquals((-1125.0F), newV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1065.9314F), (-1065.9314F), 187.6023F);
      newV.Light newV_Light0 = new newV.Light((-2909), newV_Vector3D0, (-1065.9314F), (-1065.9314F), (-2057.929F));
      assertEquals((-1065.9314F), newV_Light0.ig, 0.01F);
      assertEquals((-2909), newV_Light0.lightType);
      assertEquals((-1065.9314F), newV_Light0.ir, 0.01F);
      assertEquals((-1065.9314F), newV_Vector3D0.x, 0.01F);
      assertEquals((-2057.929F), newV_Light0.ib, 0.01F);
      assertEquals(187.6023F, newV_Vector3D0.z, 0.01F);
      assertEquals((-1065.9314F), newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(193.4485F, 0.001F, 0.001F, (-1351.346F), 0.001F, 0.001F, 1940.1439F, (-1351.346F), 193.4485F, 0.0F);
      assertEquals((-1351.346F), newV_Surface0.ka, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(193.4485F, newV_Surface0.ir, 0.01F);
      assertEquals(193.4485F, newV_Surface0.kt, 0.01F);
      assertEquals(1940.1439F, newV_Surface0.ns, 0.01F);
      assertEquals(0.001F, newV_Surface0.ks, 0.01F);
      assertEquals(0.001F, newV_Surface0.ib, 0.01F);
      assertEquals(0.001F, newV_Surface0.kd, 0.01F);
      assertEquals(0.001F, newV_Surface0.ig, 0.01F);
      assertEquals((-5.299384F), newV_Surface0.kr, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(1.0F, (-524.66656F), (-1.0F), (-524.66656F), 1666.31F, 1.0F, 1.0F, (-524.66656F), 1.0F, 0.0F);
      assertEquals((-2.0575113F), newV_Surface0.kr, 0.01F);
      assertEquals(1666.31F, newV_Surface0.kd, 0.01F);
      assertEquals(1.0F, newV_Surface0.ns, 0.01F);
      assertEquals((-524.66656F), newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.nt, 0.01F);
      assertEquals(1.0F, newV_Surface0.ir, 0.01F);
      assertEquals(1.0F, newV_Surface0.kt, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ib, 0.01F);
      assertEquals(1.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-524.66656F), newV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface((-1236.6345F), (-1236.6345F), (-1236.6345F), (-1241.0F), (-1236.6345F), (-1241.0F), (-1209.2057F), (-1209.2057F), (-1209.2057F), (-1241.0F));
      assertEquals((-1241.0F), newV_Surface0.nt, 0.01F);
      assertEquals((-1241.0F), newV_Surface0.ka, 0.01F);
      assertEquals((-1236.6345F), newV_Surface0.ir, 0.01F);
      assertEquals((-1236.6345F), newV_Surface0.kd, 0.01F);
      assertEquals((-1236.6345F), newV_Surface0.ib, 0.01F);
      assertEquals((-1209.2057F), newV_Surface0.ns, 0.01F);
      assertEquals((-4.7419724F), newV_Surface0.kr, 0.01F);
      assertEquals((-1209.2057F), newV_Surface0.kt, 0.01F);
      assertEquals((-1236.6345F), newV_Surface0.ig, 0.01F);
      assertEquals((-1241.0F), newV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.00392156F, 0.0F, (-1.0F));
      newV.Sphere newV_Sphere0 = new newV.Sphere((newV.Surface) null, newV_Vector3D0, 0.00392156F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV.Sphere newV_Sphere1 = new newV.Sphere((newV.Surface) null, newV_Vector3D1, 0.0F);
      assertEquals(0.00392156F, newV_Vector3D0.x, 0.01F);
      
      newV_Vector3D0.x = 0.0F;
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.00392156F, 0.0F, (-1.0F));
      newV.Sphere newV_Sphere0 = new newV.Sphere((newV.Surface) null, newV_Vector3D0, 0.00392156F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertTrue(boolean0);
      assertEquals((-1.0F), newV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.00392156F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV_Vector3D0.normalize();
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(4.87F, 0.019097997F, 4.87F);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 4.87F, 4.87F, 2);
      newV_Vector3D0.normalize();
      assertEquals(0.0027729513F, newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(4.87F, 4.87F, 4.87F, 4.87F, 4.87F, 4.87F, 4.87F, 4.87F, 4.87F, 4.87F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(4.87F, 0.019097997F, 4.87F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(4.87F, 4.87F, 0.019097997F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 0);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 4.87F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(4.87F, newV_Surface0.ns, 0.01F);
      assertEquals(4.87F, newV_Vector3D1.x, 0.01F);
      assertFalse(boolean0);
      assertEquals(4.87F, newV_Surface0.nt, 0.01F);
      assertEquals(4.87F, newV_Surface0.ib, 0.01F);
      assertEquals(4.87F, newV_Surface0.kd, 0.01F);
      assertEquals(4.87F, newV_Surface0.ig, 0.01F);
      assertEquals(0.019097997F, newV_Surface0.kr, 0.01F);
      assertEquals(0.019097997F, newV_Vector3D1.z, 0.01F);
      assertEquals(4.87F, newV_Surface0.ka, 0.01F);
      assertEquals(4.87F, newV_Surface0.ir, 0.01F);
      assertEquals(4.87F, newV_Surface0.kt, 0.01F);
      assertEquals(4.87F, newV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(4.87F, 0.019097997F, 4.87F);
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, 4.87F, 0.019097997F, 0.019097997F);
      newV.Vector3D newV_Vector3D1 = null;
      try {
        newV_Vector3D1 = new newV.Vector3D(newV_Light0.lvec);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("benchmarks.raytrace.sphere.Eq.newV$Vector3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV newV0 = new newV();
  }
}
