/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:18:26 GMT 2024
 */

package benchmarks.raytrace.normalize.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.normalize.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.00392156F, 0.00392156F);
      oldV_Vector3D0.normalize();
      assertEquals(0.70710677F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1025.2F, 0.0F, (-3612.9004F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-3612.9004F), oldV_Vector3D1.z, 0.01F);
      assertEquals(1025.2F, oldV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-104), (-104), (-104));
      oldV.Light oldV_Light0 = new oldV.Light((-104), oldV_Vector3D0, 0.0F, (-104.0F), 0.0F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
      assertEquals((-104.0F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-104.0F), oldV_Vector3D0.z, 0.01F);
      assertEquals((-104.0F), oldV_Light0.ig, 0.01F);
      assertEquals((-104.0F), oldV_Vector3D0.y, 0.01F);
      assertEquals((-104), oldV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface((-1.0F), (-4841.123F), (-4841.123F), (-3892.5261F), 0.0F, 0.0F, (-3892.5261F), 4169.574F, (-4841.123F), (-4841.123F));
      assertEquals((-3892.5261F), oldV_Surface0.ka, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals((-4841.123F), oldV_Surface0.ig, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
      assertEquals((-3892.5261F), oldV_Surface0.ns, 0.01F);
      assertEquals(16.351236F, oldV_Surface0.kr, 0.01F);
      assertEquals((-4841.123F), oldV_Surface0.nt, 0.01F);
      assertEquals((-4841.123F), oldV_Surface0.kt, 0.01F);
      assertEquals((-4841.123F), oldV_Surface0.ib, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1025.2F, 0.0F, (-3612.9004F));
      oldV_Vector3D0.normalize();
      oldV.Surface oldV_Surface0 = new oldV.Surface((-2842.86F), (-2842.86F), 1025.2F, 0.0F, 0.00392156F, 0.0F, 0.0F, 1025.2F, 1503.96F, 0.27298334F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 554.96F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-1.0F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(0.27298334F, oldV_Vector3D0.x, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(1025.2F, 0.0F, (-3612.9004F));
      oldV.Surface oldV_Surface0 = new oldV.Surface((-2842.86F), (-2842.86F), 1025.2F, 0.0F, 0.00392156F, 0.0F, 0.0F, 1025.2F, 1503.96F, 0.27298334F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 554.96F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals((-3612.9004F), oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(4.0203834F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ks, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertEquals((-2842.86F), oldV_Surface0.ir, 0.01F);
      assertEquals(1025.2F, oldV_Surface0.ib, 0.01F);
      assertEquals(1503.96F, oldV_Surface0.kt, 0.01F);
      assertEquals((-2842.86F), oldV_Surface0.ig, 0.01F);
      assertEquals(0.00392156F, oldV_Surface0.kd, 0.01F);
      assertEquals(0.27298334F, oldV_Surface0.nt, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2102.7F), (-2102.7F), (-1.0F));
      oldV.Surface oldV_Surface0 = new oldV.Surface(1619.32F, (-3110.0F), (-0.7071067F), (-2102.7F), 0.0F, (-0.7071067F), (-1.0F), (-0.7071067F), 0.0F, (-2102.7F));
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-1.0F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D((-3110.0F), 2425.4668F, 1183.6136F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 0.00392156F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals((-0.7071067F), oldV_Surface0.ks, 0.01F);
      assertEquals(1619.32F, oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals((-2102.7F), oldV_Surface0.nt, 0.01F);
      assertEquals((-0.0027729615F), oldV_Surface0.kr, 0.01F);
      assertEquals((-3110.0F), oldV_Surface0.ig, 0.01F);
      assertEquals((-0.7071067F), oldV_Surface0.ib, 0.01F);
      assertEquals((-2102.7F), oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals(1183.6136F, oldV_Vector3D1.z, 0.01F);
      assertEquals(2425.4668F, oldV_Vector3D1.y, 0.01F);
      assertEquals((-3110.0F), oldV_Vector3D1.x, 0.01F);
      assertFalse(boolean0);
      assertEquals((-1.0F), oldV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2770.7F), (-2770.7F), (-2770.7F));
      oldV_Vector3D0.x = (-10.865466F);
      oldV_Vector3D0.normalize();
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, (-2770.7F), 1, 2);
      assertEquals((-0.002772951F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-0.7071041F), oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2770.7F), (-2770.7F), (-2770.7F));
      oldV.Light oldV_Light0 = new oldV.Light(0, oldV_Vector3D0, (-2770.7F), (-2770.7F), (-2770.7F));
      assertEquals((-2770.7F), oldV_Vector3D0.x, 0.01F);
      assertEquals((-2770.7F), oldV_Light0.ir, 0.01F);
      assertEquals((-2770.7F), oldV_Light0.ib, 0.01F);
      assertEquals(0, oldV_Light0.lightType);
      assertEquals((-2770.7F), oldV_Light0.ig, 0.01F);
      assertEquals((-2770.7F), oldV_Vector3D0.z, 0.01F);
      assertEquals((-2770.7F), oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface((-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F), (-2770.7F));
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2770.7F), (-2770.7F), (-2770.7F));
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-2770.7F), oldV_Vector3D0.x, 0.01F);
      
      oldV_Vector3D0.x = (-10.865466F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-10.865466F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, (-2770.7F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
