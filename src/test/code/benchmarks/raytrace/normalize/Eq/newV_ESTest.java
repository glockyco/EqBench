/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:19:31 GMT 2024
 */

package benchmarks.raytrace.normalize.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.normalize.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1837.9888F), 0.0F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals((-1.0F), newV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, (-1837.9888F), 0.0F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV_Vector3D1.z = (-1837.9888F);
      newV_Vector3D1.normalize();
      assertEquals((-0.70710677F), newV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-1015.0F), 0.0F, (-1015.0F));
      newV.Light newV_Light0 = new newV.Light((-248), newV_Vector3D0, 0.0F, (-248), (-248));
      assertEquals((-1015.0F), newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals((-1015.0F), newV_Vector3D0.z, 0.01F);
      assertEquals((-248), newV_Light0.lightType);
      assertEquals((-248.0F), newV_Light0.ib, 0.01F);
      assertEquals((-248.0F), newV_Light0.ig, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(2373.655F, 2373.655F, 0.0F, 0.0F, (-1537.698F), 0.0F, 0.0F, 2373.655F, 0.0F, (-1537.698F));
      assertEquals(9.308431F, newV_Surface0.kr, 0.01F);
      assertEquals(0.0F, newV_Surface0.ka, 0.01F);
      assertEquals((-1537.698F), newV_Surface0.nt, 0.01F);
      assertEquals(0.0F, newV_Surface0.ns, 0.01F);
      assertEquals(0.0F, newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals((-1537.698F), newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals(2373.655F, newV_Surface0.ig, 0.01F);
      assertEquals(2373.655F, newV_Surface0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(0.0F, (-1.0F), (-1.0F), (-1961.97F), (-1.0F), 0.0F, 5274.338F, (-1.0F), 0.0F, (-1.0F));
      assertEquals((-0.00392156F), newV_Surface0.kr, 0.01F);
      assertEquals((-1961.97F), newV_Surface0.ka, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ig, 0.01F);
      assertEquals(0.0F, newV_Surface0.ks, 0.01F);
      assertEquals((-1.0F), newV_Surface0.ib, 0.01F);
      assertEquals(0.0F, newV_Surface0.kt, 0.01F);
      assertEquals((-1.0F), newV_Surface0.kd, 0.01F);
      assertEquals(0.0F, newV_Surface0.ir, 0.01F);
      assertEquals(5274.338F, newV_Surface0.ns, 0.01F);
      assertEquals((-1.0F), newV_Surface0.nt, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(277.9526F, 0.001F, 2919.915F);
      assertEquals(0.001F, newV_Vector3D0.y, 0.01F);
      
      newV_Vector3D0.y = 2919.915F;
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV.Sphere newV_Sphere0 = new newV.Sphere((newV.Surface) null, newV_Vector3D1, 2919.915F);
      newV_Vector3D0.y = 0.0F;
      newV.Sphere newV_Sphere1 = new newV.Sphere((newV.Surface) null, newV_Vector3D0, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(389.026F, 389.026F, 389.026F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      assertEquals(389.026F, newV_Vector3D1.x, 0.01F);
      
      newV_Vector3D1.x = (-2510.71F);
      newV.Surface newV_Surface0 = new newV.Surface(389.026F, 0.0F, 868.0F, 389.026F, (-2510.71F), (-2403.81F), 0.0F, 389.026F, 1.0F, 0.0F);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 0.0F);
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 0.0F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(277.9526F, 0.001F, 2919.915F);
      newV.Sphere newV_Sphere0 = new newV.Sphere((newV.Surface) null, newV_Vector3D0, 2919.915F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere0);
      assertTrue(boolean0);
      assertEquals(2919.915F, newV_Vector3D0.z, 0.01F);
      assertEquals(0.001F, newV_Vector3D0.y, 0.01F);
      assertEquals(277.9526F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(531.6019F, 3461.4673F, 531.6019F);
      newV_Vector3D0.normalize();
      newV_Vector3D0.normalize();
      assertEquals(0.1500781F, newV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(0.0F, 0.0F, 0.0F);
      newV.Light newV_Light0 = new newV.Light(1, newV_Vector3D0, 0.0F, 0.0F, 1);
      assertEquals(1, newV_Light0.lightType);
      assertEquals(0.0F, newV_Vector3D0.z, 0.01F);
      assertEquals(1.0F, newV_Light0.ib, 0.01F);
      assertEquals(0.0F, newV_Light0.ir, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, newV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, newV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      newV.Light newV_Light0 = new newV.Light(2, (newV.Vector3D) null, (-2204.7378F), (-2204.7378F), 2);
      assertEquals((-2204.7378F), newV_Light0.ig, 0.01F);
      assertEquals((-2204.7378F), newV_Light0.ir, 0.01F);
      assertEquals(2.0F, newV_Light0.ib, 0.01F);
      assertEquals(2, newV_Light0.lightType);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D((-2204.7378F), (-2204.7378F), (-2204.7378F));
      newV.Light newV_Light0 = new newV.Light(0, newV_Vector3D0, (-2204.7378F), (-2204.7378F), (-2204.7378F));
      assertEquals((-2204.7378F), newV_Light0.ig, 0.01F);
      assertEquals(0, newV_Light0.lightType);
      assertEquals((-2204.7378F), newV_Vector3D0.y, 0.01F);
      assertEquals((-2204.7378F), newV_Vector3D0.x, 0.01F);
      assertEquals((-2204.7378F), newV_Light0.ir, 0.01F);
      assertEquals((-2204.7378F), newV_Light0.ib, 0.01F);
      assertEquals((-2204.7378F), newV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      newV.Surface newV_Surface0 = new newV.Surface(531.6019F, 531.6019F, 3461.4673F, 531.6019F, 3461.4673F, 531.6019F, 531.6019F, 531.6019F, 531.6019F, 531.6019F);
      newV.Vector3D newV_Vector3D0 = new newV.Vector3D(531.6019F, 3461.4673F, 531.6019F);
      newV.Vector3D newV_Vector3D1 = new newV.Vector3D(newV_Vector3D0);
      newV.Sphere newV_Sphere0 = new newV.Sphere(newV_Surface0, newV_Vector3D1, 0.0F);
      newV_Vector3D0.normalize();
      newV.Sphere newV_Sphere1 = new newV.Sphere(newV_Surface0, newV_Vector3D0, 3461.4673F);
      boolean boolean0 = newV_Sphere0.intersect(newV_Sphere1);
      assertEquals(0.1500781F, newV_Vector3D0.x, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      newV newV0 = new newV();
  }
}
