/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 12:20:37 GMT 2024
 */

package benchmarks.raytrace.normalize.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.raytrace.normalize.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(4411.6F, 4411.6F, 0.0F);
      oldV_Vector3D0.normalize();
      oldV_Vector3D0.normalize();
      assertEquals(0.70710677F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2451.0F), 0.0F, 0);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals((-2451.0F), oldV_Vector3D1.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(4411.6F, 4411.6F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      assertEquals(0.0F, oldV_Vector3D1.z, 0.01F);
      assertEquals(4411.6F, oldV_Vector3D1.x, 0.01F);
      assertEquals(4411.6F, oldV_Vector3D1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-1509.39F), (-4818.2715F), 1437.2073F);
      oldV.Light oldV_Light0 = new oldV.Light((-3237), oldV_Vector3D0, (-1.0F), 0.0F, 1265.0F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
      assertEquals((-4818.2715F), oldV_Vector3D0.y, 0.01F);
      assertEquals((-1509.39F), oldV_Vector3D0.x, 0.01F);
      assertEquals(1265.0F, oldV_Light0.ib, 0.01F);
      assertEquals(1437.2073F, oldV_Vector3D0.z, 0.01F);
      assertEquals((-3237), oldV_Light0.lightType);
      assertEquals((-1.0F), oldV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2035.0F), 0.0F, 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-2035.0F), 0.0F, 0.0F, 846.71735F, (-2035.0F), 846.71735F, 846.71735F, 1892.055F, 1892.055F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 254.59315F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.001F, 1259.4243F, (-37.1F));
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-6173.0F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(0.001F, oldV_Vector3D1.x, 0.01F);
      assertEquals(7.4198074F, oldV_Surface0.kr, 0.01F);
      assertEquals((-2035.0F), oldV_Surface0.kd, 0.01F);
      assertEquals(1259.4243F, oldV_Vector3D1.y, 0.01F);
      assertEquals(846.71735F, oldV_Surface0.ka, 0.01F);
      assertEquals(846.71735F, oldV_Surface0.ks, 0.01F);
      assertEquals((-37.1F), oldV_Vector3D1.z, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(1892.055F, oldV_Surface0.kt, 0.01F);
      assertEquals((-2035.0F), oldV_Surface0.ir, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(846.71735F, oldV_Surface0.ns, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D((-2035.0F), 0.0F, 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface((-2035.0F), 0.0F, 0.0F, 846.71735F, (-2035.0F), 846.71735F, 846.71735F, 1892.055F, 1892.055F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 254.59315F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ig, 0.01F);
      assertEquals((-2035.0F), oldV_Surface0.ir, 0.01F);
      assertEquals((-2035.0F), oldV_Surface0.kd, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(1892.055F, oldV_Surface0.kt, 0.01F);
      assertEquals(7.4198074F, oldV_Surface0.kr, 0.01F);
      assertEquals(846.71735F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Surface0.nt, 0.01F);
      assertEquals(846.71735F, oldV_Surface0.ka, 0.01F);
      assertTrue(boolean0);
      assertEquals(846.71735F, oldV_Surface0.ks, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, (-1.0F), 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals((-1.0F), oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV_Vector3D0.normalize();
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(2146881969, oldV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(2146881969, oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 1.6511137E7F, 1.6511137E7F);
      oldV.Light oldV_Light0 = new oldV.Light(1, oldV_Vector3D0, 0.0F, 1.6511137E7F, 0.70710677F);
      assertEquals(0.70710677F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Light oldV_Light0 = new oldV.Light(0, oldV_Vector3D0, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, oldV_Vector3D0.x, 0.01F);
      assertEquals(0.0F, oldV_Vector3D0.y, 0.01F);
      assertEquals(0, oldV_Light0.lightType);
      assertEquals(0.0F, oldV_Vector3D0.z, 0.01F);
      assertEquals(0.0F, oldV_Light0.ib, 0.01F);
      assertEquals(0.0F, oldV_Light0.ir, 0.01F);
      assertEquals(0.0F, oldV_Light0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(0.0F, (-1.0F), 0.0F);
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, 0.0F);
      boolean boolean0 = oldV_Sphere1.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ka, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ns, 0.01F);
      assertEquals(0.0F, oldV_Vector3D1.x, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.ib, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kd, 0.01F);
      assertEquals((-1.0F), oldV_Surface0.ig, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      oldV.Surface oldV_Surface0 = new oldV.Surface(1.6511137E7F, 1.6511137E7F, 1.6511137E7F, 1.6511137E7F, 1.6511137E7F, 1.6511137E7F, 1.6511137E7F, 0.0F, 0.0F, 1.6511137E7F);
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 1.6511137E7F, 1.6511137E7F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 0.0F);
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere0);
      assertEquals(0.0F, oldV_Surface0.kt, 0.01F);
      assertEquals(0.0F, oldV_Surface0.kr, 0.01F);
      assertTrue(boolean0);
      assertEquals(1.6511137E7F, oldV_Vector3D0.y, 0.01F);
      assertEquals(1.6511137E7F, oldV_Surface0.ks, 0.01F);
      assertEquals(1.6511137E7F, oldV_Surface0.ir, 0.01F);
      assertEquals(1.6511137E7F, oldV_Surface0.ib, 0.01F);
      assertEquals(1.6511137E7F, oldV_Surface0.kd, 0.01F);
      assertEquals(1.6511137E7F, oldV_Surface0.ka, 0.01F);
      assertEquals(1.6511137E7F, oldV_Surface0.nt, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      oldV oldV0 = new oldV();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      oldV.Vector3D oldV_Vector3D0 = new oldV.Vector3D(0.0F, 0.0F, 0.0F);
      oldV.Vector3D oldV_Vector3D1 = new oldV.Vector3D(oldV_Vector3D0);
      oldV_Vector3D1.y = 2714.0F;
      oldV_Vector3D1.normalize();
      oldV.Surface oldV_Surface0 = new oldV.Surface(0.0F, (-470.7409F), 1.0F, (-543.4681F), 743389.9F, (-1.0F), (-470.7409F), 0.0F, 743389.9F, 2895498.0F);
      oldV.Sphere oldV_Sphere0 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D0, 1.0F);
      oldV.Sphere oldV_Sphere1 = new oldV.Sphere(oldV_Surface0, oldV_Vector3D1, (-1.0F));
      boolean boolean0 = oldV_Sphere0.intersect(oldV_Sphere1);
      assertEquals(1.0F, oldV_Vector3D1.y, 0.01F);
      assertTrue(boolean0);
  }
}
