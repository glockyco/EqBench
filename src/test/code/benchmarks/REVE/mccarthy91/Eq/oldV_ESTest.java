/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 21:11:49 GMT 2024
 */

package benchmarks.REVE.mccarthy91.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.REVE.mccarthy91.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = (-1060);
      int int1 = oldV0.f((-1060));
      assertFalse(int1 == int0);
      assertEquals(91, int1);
      
      int int2 = oldV0.f(91);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(91, int2);
      
      int int3 = oldV0.f(0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(91, int3);
      
      int int4 = oldV0.f(597);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(587, int4);
      
      int int5 = oldV0.f(597);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(587, int5);
      
      int int6 = oldV0.f((-899));
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(91, int6);
      
      int int7 = oldV0.f(91);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertFalse(int7 == int4);
      assertEquals(91, int7);
      
      int int8 = oldV0.f(91);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertEquals(91, int8);
      
      int int9 = oldV0.f((-1252));
      assertTrue(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int2);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertTrue(int9 == int1);
      assertTrue(int9 == int6);
      assertFalse(int9 == int4);
      assertTrue(int9 == int8);
      assertEquals(91, int9);
      
      int int10 = oldV0.f(0);
      assertTrue(int10 == int6);
      assertFalse(int10 == int5);
      assertTrue(int10 == int7);
      assertFalse(int10 == int0);
      assertTrue(int10 == int3);
      assertTrue(int10 == int8);
      assertFalse(int10 == int4);
      assertTrue(int10 == int9);
      assertTrue(int10 == int1);
      assertTrue(int10 == int2);
      assertEquals(91, int10);
      
      // Undeclared exception!
      oldV0.f((-2554));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = oldV0.f((-1000));
      assertEquals(91, int0);
      
      int int1 = oldV0.f(91);
      assertTrue(int1 == int0);
      assertEquals(91, int1);
      
      int int2 = oldV0.f(201);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(191, int2);
      
      int int3 = oldV0.f(91);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(91, int3);
      
      int int4 = oldV0.f(91);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(91, int4);
      
      int int5 = oldV0.f((-1000));
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(91, int5);
      
      int int6 = oldV0.f(91);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertEquals(91, int6);
      
      int int7 = oldV0.f(0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertEquals(91, int7);
      
      int int8 = oldV0.f(91);
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertFalse(int8 == int2);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      assertEquals(91, int8);
      
      int int9 = oldV0.f(91);
      assertTrue(int9 == int7);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int5);
      assertTrue(int9 == int8);
      assertTrue(int9 == int4);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertFalse(int9 == int2);
      assertEquals(91, int9);
      
      int int10 = oldV0.f(91);
      assertFalse(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int0);
      assertTrue(int10 == int1);
      assertTrue(int10 == int4);
      assertTrue(int10 == int9);
      assertTrue(int10 == int3);
      assertTrue(int10 == int5);
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertEquals(91, int10);
      
      int int11 = oldV0.f(91);
      assertFalse(int11 == int2);
      assertTrue(int11 == int4);
      assertTrue(int11 == int9);
      assertTrue(int11 == int0);
      assertTrue(int11 == int3);
      assertTrue(int11 == int5);
      assertTrue(int11 == int6);
      assertTrue(int11 == int8);
      assertTrue(int11 == int7);
      assertTrue(int11 == int10);
      assertTrue(int11 == int1);
      assertEquals(91, int11);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = oldV0.f((-1156));
      assertEquals(91, int0);
      
      int int1 = oldV0.f(91);
      assertTrue(int1 == int0);
      assertEquals(91, int1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = oldV0.f((-4103));
      assertEquals(91, int0);
      
      int int1 = oldV0.f(3305);
      assertFalse(int1 == int0);
      assertEquals(3295, int1);
      
      int int2 = oldV0.f(3295);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3285, int2);
      
      int int3 = oldV0.f(3295);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(3285, int3);
      
      int int4 = oldV0.f(1630);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(1620, int4);
      
      int int5 = (-1);
      int int6 = oldV0.f((-1));
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertEquals(91, int6);
      
      int int7 = oldV0.f(1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int0);
      assertFalse(int7 == int1);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertEquals(91, int7);
      
      // Undeclared exception!
      oldV0.f((-1221));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = oldV0.f(2826);
      assertEquals(2816, int0);
      
      int int1 = oldV0.f(2826);
      assertTrue(int1 == int0);
      assertEquals(2816, int1);
      
      int int2 = oldV0.f(2826);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2816, int2);
      
      int int3 = oldV0.f(2816);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2806, int3);
      
      int int4 = oldV0.f(2806);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(2796, int4);
      
      int int5 = oldV0.f((-2171));
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(91, int5);
      
      int int6 = oldV0.f(0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      assertEquals(91, int6);
      
      int int7 = oldV0.f(2826);
      assertTrue(int7 == int2);
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertTrue(int7 == int1);
      assertEquals(2816, int7);
      
      int int8 = oldV0.f(2806);
      assertFalse(int8 == int2);
      assertTrue(int8 == int4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertEquals(2796, int8);
      
      int int9 = oldV0.f(2816);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int0);
      assertTrue(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertEquals(2806, int9);
      
      int int10 = oldV0.f(0);
      assertFalse(int10 == int9);
      assertTrue(int10 == int5);
      assertTrue(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int4);
      assertFalse(int10 == int3);
      assertFalse(int10 == int1);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertEquals(91, int10);
      
      int int11 = oldV0.f(2796);
      assertFalse(int11 == int7);
      assertFalse(int11 == int5);
      assertFalse(int11 == int1);
      assertFalse(int11 == int6);
      assertFalse(int11 == int0);
      assertFalse(int11 == int8);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int10);
      assertFalse(int11 == int9);
      assertFalse(int11 == int2);
      assertEquals(2786, int11);
      
      int int12 = oldV0.f(0);
      assertFalse(int12 == int7);
      assertFalse(int12 == int4);
      assertFalse(int12 == int3);
      assertFalse(int12 == int1);
      assertTrue(int12 == int10);
      assertFalse(int12 == int0);
      assertFalse(int12 == int11);
      assertFalse(int12 == int9);
      assertTrue(int12 == int5);
      assertTrue(int12 == int6);
      assertFalse(int12 == int8);
      assertFalse(int12 == int2);
      assertEquals(91, int12);
      
      int int13 = oldV0.f(2816);
      assertFalse(int13 == int7);
      assertFalse(int13 == int5);
      assertFalse(int13 == int2);
      assertFalse(int13 == int10);
      assertFalse(int13 == int12);
      assertFalse(int13 == int0);
      assertFalse(int13 == int4);
      assertTrue(int13 == int9);
      assertFalse(int13 == int1);
      assertFalse(int13 == int6);
      assertFalse(int13 == int8);
      assertFalse(int13 == int11);
      assertTrue(int13 == int3);
      assertEquals(2806, int13);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      oldV oldV0 = new oldV();
      int int0 = oldV0.f(0);
      assertEquals(91, int0);
      
      oldV0.f((-610));
      oldV0.f(0);
      int int1 = oldV0.f(91);
      assertEquals(91, int1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      oldV oldV0 = new oldV();
      int int0 = oldV0.f(100);
      assertEquals(91, int0);
  }
}
