/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 17:56:12 GMT 2024
 */

package benchmarks.ran.poidev.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.ran.poidev.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = oldV.gammln(2.0);
      assertEquals((-4.440892098500626E-16), double0, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      double double1 = oldV.gammln((-4.440892098500626E-16));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-5);
      double double0 = oldV.snippet(3158.548765826115, (-5), (-5));
      assertEquals(3206.0, double0, 0.01);
      
      double double1 = oldV.gammln(2498.45661);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(17045.04720693185, double1, 0.01);
      
      int int1 = (-985);
      // Undeclared exception!
      oldV.snippet(2498.45661, (-985), (-985));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      oldV.snippet(12.0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = 734;
      double double0 = oldV.snippet(0.0, 734, 734);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = oldV.gammln((-1023.82273599034));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = oldV.gammln((-494.728));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = oldV.gammln(0.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = oldV.ran1(734);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.41599935685098144, double4, 0.01);
      
      double double5 = oldV.ran1(1);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.41599935685098144, double5, 0.01);
      
      int int1 = 1339;
      double double6 = oldV.ran1(1339);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(0.41599935685098144, double6, 0.01);
      
      int int2 = 530511967;
      // Undeclared exception!
      oldV.snippet(1339, 1339, 530511967);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-469);
      int int1 = (-1461);
      double double0 = oldV.snippet(0.0, (-469), (-1461));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = oldV.gammln(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = oldV.ran1(0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.41599935685098144, double2, 0.01);
      
      double double3 = oldV.gammln((-1.0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int2 = 530511967;
      double double4 = oldV.snippet(0.0, 530511967, 0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = oldV.snippet(155.769660429, (-469), 530511967);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(161.0, double5, 0.01);
      
      double double6 = oldV.ran1(0);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.41599935685098144, double6, 0.01);
      
      double double7 = oldV.ran1((-469));
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(0.10369836311028263, double7, 0.01);
      
      double double8 = oldV.ran1((-469));
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(0.10369836311028263, double8, 0.01);
      
      // Undeclared exception!
      oldV.snippet(543.5888, (-1738), (-469));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = oldV.snippet(1.0, (-1127), 32);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = oldV.snippet(0.0, 32, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      double double2 = oldV.snippet((-1355.803989659749), (-2167), (-2167));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = oldV.snippet(1.0, 32, 5);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = oldV.ran1(0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.41599935685098144, double4, 0.01);
      
      double double5 = oldV.ran1(32);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(0.41599935685098144, double5, 0.01);
      
      double double6 = oldV.snippet(0.0, (-2167), 1314);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = oldV.gammln(1.0);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = oldV.ran1((-2167));
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(0.6819695195564858, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = oldV.gammln((-1079.1146803754));
      assertEquals(Double.NaN, double0, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      double double1 = oldV.snippet(0.0, (-373), (-373));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = oldV.snippet((-1947.34), (-3634), 0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = oldV.snippet(0.0, 0, 2);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = oldV.gammln((-1520.9422675780995));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = oldV.snippet((-2658.466996), 2, 284);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = oldV.ran1(530511967);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0.41599935685098144, double6, 0.01);
      
      double double7 = oldV.ran1(149);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(0.41599935685098144, double7, 0.01);
      
      double double8 = oldV.gammln((-42.4524));
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = oldV.snippet(0.0, 530511967, 0);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(0.0, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = oldV.ran1(7);
      assertEquals(0.41599935685098144, double0, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      double double1 = oldV.gammln(0.41599935685098144);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.7566071022036756, double1, 0.01);
      
      double double2 = oldV.snippet((-2651.15210904), 7, 7);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = oldV.ran1(7);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.41599935685098144, double3, 0.01);
      
      double double4 = oldV.snippet((-2651.15210904), 7, 0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = oldV.gammln(0.0);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      
      double double6 = oldV.gammln(0.0);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      double double7 = oldV.snippet(Double.POSITIVE_INFINITY, 1, (-1474));
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      double double8 = oldV.ran1(1);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(0.41599935685098144, double8, 0.01);
      
      double double9 = oldV.gammln((-1779.45));
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = oldV.ran1(1);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(0.41599935685098144, double10, 0.01);
      
      double double11 = oldV.snippet(0.0, 4594, 7);
      assertNotEquals(double11, double7, 0.01);
      assertEquals(double11, double4, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertEquals(0.0, double11, 0.01);
      
      double double12 = oldV.gammln(0.41599935685098144);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals(double12, double1, 0.01);
      assertEquals(0.7566071022036756, double12, 0.01);
      
      double double13 = oldV.snippet((-2416.8981), 0, 0);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(double13, double4, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double2, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(0.0, double13, 0.01);
      
      double double14 = oldV.gammln(0.41599935685098144);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertEquals(double14, double12, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertEquals(double14, double1, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertEquals(0.7566071022036756, double14, 0.01);
      
      double double15 = oldV.ran1(0);
      assertEquals(double15, double3, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertEquals(double15, double0, 0.01);
      assertEquals(double15, double10, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertEquals(double15, double8, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertEquals(0.41599935685098144, double15, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      double double0 = oldV.gammln((-469.9632257162353));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = oldV.gammln((-1.0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = oldV.ran1(0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.41599935685098144, double2, 0.01);
      
      double double3 = oldV.ran1((-3313));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.20586924730142078, double3, 0.01);
      
      double double4 = oldV.snippet(Double.NaN, (-4487), 0);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = oldV.ran1(1861);
      assertEquals(0.41599935685098144, double0, 0.01);
      
      double double1 = oldV.gammln(1861);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(12147.380235295088, double1, 0.01);
      
      double double2 = oldV.gammln(1861);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(12147.380235295088, double2, 0.01);
      
      double double3 = oldV.ran1(1861);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.41599935685098144, double3, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      int int0 = (-160);
      int int1 = 1;
      double double4 = oldV.snippet(0.41599935685098144, (-160), 1);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = oldV.snippet(1861, (-160), 312);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1949.0, double5, 0.01);
      
      int int2 = 0;
      // Undeclared exception!
      oldV.snippet((-1.0), 0, 4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = oldV.gammln((-479.3623513264));
      assertEquals(Double.NaN, double0, 0.01);
      
      oldV oldV0 = new oldV();
      assertNotNull(oldV0);
      
      double double1 = oldV.snippet(0.0, 1, Integer.MAX_VALUE);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = oldV.gammln(1);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = 2505;
      double double3 = oldV.snippet(0.0, 2505, Integer.MAX_VALUE);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = oldV.ran1(2505);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.41599935685098144, double4, 0.01);
      
      double double5 = oldV.gammln(0.41599935685098144);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.7566071022036756, double5, 0.01);
      
      double double6 = oldV.gammln(0.0);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      int int1 = 2189;
      double double7 = oldV.snippet(3373.7196, Integer.MAX_VALUE, 2189);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(3677.0, double7, 0.01);
      
      // Undeclared exception!
      oldV.snippet((-1.0), 1, 2505);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      oldV oldV0 = new oldV();
      int int0 = 0;
      oldV.snippet(3.0E-16, 0, 0);
      oldV.gammln(0.0);
      oldV.gammln(0.0);
      oldV.snippet(0.0, 0, 0);
      oldV.ran1(0);
      oldV.ran1(0);
      oldV.gammln(0.0);
      oldV.snippet(Double.POSITIVE_INFINITY, 0, 0);
      oldV.ran1(0);
      oldV.ran1(0);
      int int1 = 1361;
      oldV.snippet(0.0, 127773, 1361);
      oldV.gammln(0.0);
      // Undeclared exception!
      oldV.snippet(668.97675783, 0, 127773);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = oldV.gammln(1.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = oldV.gammln((-737.1786318047));
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      oldV.ran1(309);
      oldV oldV0 = new oldV();
      // Undeclared exception!
      oldV.snippet(535.3649, 309, 7);
  }
}
