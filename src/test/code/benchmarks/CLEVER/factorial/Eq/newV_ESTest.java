/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 13:46:39 GMT 2024
 */

package benchmarks.CLEVER.factorial.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import benchmarks.CLEVER.factorial.Eq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      newV newV0 = new newV();
      newV0.lib(1951);
      newV0.factorial(1951);
      newV0.factorial(0);
      newV0.lib(5);
      newV0.lib(5);
      newV0.lib(0);
      newV0.lib(510);
      newV0.factorial(0);
      newV0.factorial(0);
      int int0 = newV0.lib(5);
      assertEquals(120, int0);
      
      newV0.lib(510);
      newV0.lib(0);
      newV0.factorial(120);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.factorial(510);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.lib(0);
      newV0.lib(0);
      newV0.factorial(510);
      newV0.lib(0);
      newV0.lib(0);
      newV0.factorial((-1));
      int int1 = newV0.lib((-691));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      newV newV0 = new newV();
      int int0 = newV0.lib(0);
      newV0.lib(0);
      int int1 = newV0.factorial(0);
      int int2 = newV0.lib(0);
      int int3 = newV0.lib(0);
      newV0.lib(0);
      newV0.factorial(0);
      int int4 = 2380;
      newV0.lib(int4);
      int int5 = newV0.lib(int0);
      newV0.factorial(int3);
      int int6 = newV0.lib(int5);
      newV0.lib(int6);
      int int7 = (-807);
      newV0.factorial(int7);
      int int8 = (-3468);
      newV0.lib(int8);
      newV0.factorial(int2);
      int int9 = (-1711);
      newV0.factorial(int9);
      int int10 = newV0.lib(int1);
      newV0.lib(int1);
      newV0.factorial(int0);
      newV0.factorial(int10);
      int int11 = (-1224);
      newV0.lib(int11);
      int int12 = 0;
      newV0.factorial(int12);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      newV newV0 = new newV();
      newV0.lib(5);
      newV0.lib(120);
      newV0.factorial(5);
      newV0.factorial(0);
      newV0.lib(120);
      newV0.factorial(0);
      newV0.lib(0);
      newV0.factorial((-1));
      newV0.lib(0);
      newV0.factorial((-1));
      int int0 = newV0.factorial(5);
      newV0.factorial(5);
      newV0.factorial(0);
      int int1 = newV0.lib(5);
      assertEquals(120, int1);
      
      newV0.factorial(76);
      newV0.factorial(1466);
      newV0.lib(0);
      newV0.lib((-1));
      newV0.factorial((-125));
      newV0.factorial(0);
      int int2 = newV0.factorial(0);
      assertTrue(int2 == int0);
      
      newV0.factorial((-390));
      int int3 = newV0.factorial(2712);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      newV newV0 = new newV();
      newV0.factorial(1320);
      newV0.factorial(1320);
      newV0.lib(0);
      newV0.factorial(1399);
      newV0.factorial((-1));
      newV0.lib((-1));
      newV0.lib(0);
      newV0.factorial((-3467));
      newV0.factorial(2000);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.lib(0);
      int int0 = newV0.factorial(5);
      newV0.lib(0);
      newV0.lib((-1));
      int int1 = newV0.lib(5);
      assertEquals(120, int1);
      
      newV0.factorial((-3467));
      newV0.lib(0);
      newV0.factorial(0);
      newV0.lib((-1));
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.lib((-4568));
      newV0.lib(0);
      newV0.factorial(0);
      newV0.factorial((-1));
      newV0.factorial(0);
      int int2 = newV0.factorial(0);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      newV newV0 = new newV();
      newV0.factorial(1);
      newV0.factorial(1);
      newV0.lib(1);
      newV0.factorial(1);
      newV0.factorial(1);
      newV0.lib(1);
      newV0.lib(1);
      newV0.lib(0);
      int int0 = newV0.factorial(1);
      assertEquals(1, int0);
      
      newV0.factorial(0);
      newV0.lib(1);
      newV0.factorial(0);
      newV0.factorial(0);
      int int1 = newV0.factorial(3156);
      newV0.factorial(0);
      newV0.lib(1);
      newV0.factorial(0);
      newV0.lib(1);
      int int2 = newV0.lib(0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      newV newV0 = new newV();
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.lib(0);
      int int0 = newV0.factorial(0);
      assertEquals(0, int0);
      
      newV0.lib(0);
      newV0.lib(0);
      newV0.lib((-2119));
      newV0.lib(0);
      newV0.lib(5);
      newV0.factorial(0);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.factorial(0);
      int int1 = newV0.factorial(120);
      assertEquals(0, int1);
      
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.factorial(0);
      newV0.lib(0);
      newV0.factorial(0);
      newV0.lib((-458));
      int int2 = newV0.lib(5);
      assertEquals(120, int2);
      
      int int3 = newV0.factorial((-1670));
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      newV newV0 = new newV();
      newV0.lib(0);
      int int0 = 0;
      int int1 = newV0.factorial(0);
      int int2 = (-1);
      int int3 = newV0.lib((-1));
      int int4 = newV0.factorial(0);
      int int5 = 3093;
      int int6 = newV0.lib(int5);
      int int7 = 1954;
      newV0.lib(int7);
      newV0.lib(int4);
      newV0.lib(int0);
      newV0.lib(int1);
      int int8 = 471;
      newV0.lib(int8);
      newV0.lib(int6);
      int int9 = 386;
      int int10 = newV0.lib(int9);
      newV0.factorial(int3);
      int int11 = newV0.factorial(int10);
      newV0.factorial(int2);
      int int12 = 0;
      newV0.factorial(int12);
      newV0.lib(int11);
      int int13 = (-92);
      newV0.factorial(int13);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      newV newV0 = new newV();
      newV0.factorial((-3411));
      newV0.lib(0);
      newV0.lib(0);
      newV0.factorial((-2514));
      newV0.lib(0);
      newV0.lib(0);
      int int0 = newV0.factorial(0);
      assertEquals(0, int0);
      
      int int1 = newV0.lib(0);
      assertEquals(0, int1);
  }
}
