/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 16:41:28 GMT 2024
 */

package benchmarks.ell.rf.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.ell.rf.Neq.newV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class newV_ESTest extends newV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = newV.SIGN((-913.0), (-1443.43807345));
      assertEquals((-913.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = newV.SIGN(0.0, (-2455.584088337674));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = newV.SIGN(0.07142857142857142, 0.0);
      assertEquals(0.07142857142857142, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = newV.snippet(3.0E37, 3.0E37, 3.0E37);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = newV.snippet(0.0, 1.5E-38, 1.5E-38);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = newV.SQR(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = newV.MIN(0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = newV.MAX((-368.0672875), (-368.0672875));
      assertEquals((-368.0672875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = newV.MIN(1.0, 0.0025);
      assertEquals(0.0025, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = newV.MIN((-3958.87), (-3958.87));
      assertEquals((-3958.87), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = newV.MAX(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = newV.MAX(0.0, 0.07142857142857142);
      assertEquals(0.07142857142857142, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = newV.SIGN(2.321535927545733, (-2369.5333770451916));
      assertEquals((-2.321535927545733), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = newV.SIGN((-0.0989096), 0.146854478701326);
      assertEquals(0.0989096, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = newV.SIGN(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = newV.snippet(9.000000000000001E74, 9.000000000000001E74, 3.0E37);
      assertEquals((-9999.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = newV.snippet(0.0, 0.0, 0.0);
      assertEquals((-9999.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = newV.snippet(2030.3635363824424, 2.321535927545733, 2.321535927545733);
      assertEquals(1.0000000548409094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = newV.snippet(0.146854478701326, 0.146854478701326, (-0.0989096));
      assertEquals((-9999.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = newV.SQR(3.0E37);
      assertEquals(9.000000000000001E74, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      newV newV0 = new newV();
  }
}
