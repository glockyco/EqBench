/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 16:58:46 GMT 2024
 */

package benchmarks.ell.ellpi.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.ell.ellpi.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = oldV.SIGN(0.0, (-3878.475622787557));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = oldV.snippet(0.0, (-862.008852), (-121.1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = oldV.SQR(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = oldV.SIGN(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = oldV.MIN(0.1111111111111111, 3.0E37);
      assertEquals(0.1111111111111111, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = oldV.MAX(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = oldV.MAX((-121.1), (-121.1));
      assertEquals((-121.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = oldV.MIN((-32.877), (-3478.920054));
      assertEquals((-3478.920054), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = oldV.MIN(0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = oldV.MAX((-1.72E19), 9.000000000000001E74);
      assertEquals(9.000000000000001E74, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = oldV.MAX(9.000000000000001E74, 3.0E37);
      assertEquals(9.000000000000001E74, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = oldV.SQR((-1205.0));
      assertEquals(1452025.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = oldV.snippet((-1142.58659), (-1142.58659), 2423.878432);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = oldV.snippet((-1.72E19), (-1.72E19), 0.0);
      assertEquals((-6.578016149543848E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = oldV.snippet(4053.58415729474, 4053.58415729474, 0.0);
      assertEquals(0.024484658178066658, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = oldV.snippet((-121.8263210682405), (-121.8263210682405), 3.0E37);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = oldV.SIGN(3.0E37, (-121.8263210682405));
      assertEquals((-3.0E37), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = oldV.SIGN((-2916.761352769053), 45.9170176946194);
      assertEquals(2916.761352769053, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = oldV.SIGN(45.9170176946194, 45.9170176946194);
      assertEquals(45.9170176946194, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = oldV.SIGN((-121.8263210682405), (-121.8263210682405));
      assertEquals((-121.8263210682405), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
