/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 17:26:48 GMT 2024
 */

package benchmarks.ell.zbrent.Neq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.ell.zbrent.Neq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = oldV.SIGN(0.0, (-1363.27));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = oldV.snippet((-0.20623694959525163), 887.910933809, 887.910933809);
      assertEquals((-0.7065887315888106), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = oldV.SQR(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = oldV.SIGN(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = oldV.MIN(406.51, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = oldV.MIN(0.5, 0.5);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = oldV.MAX(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = oldV.SIGN(1521.1, (-1737.095283));
      assertEquals((-1521.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = oldV.MIN((-1521.1), (-1737.095283));
      assertEquals((-1737.095283), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = oldV.MIN((-1521.1), 1521.1);
      assertEquals((-1521.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = oldV.MAX((-1737.095283), 3989.874336427186);
      assertEquals(3989.874336427186, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = oldV.MAX((-0.23081134717120586), (-1737.095283));
      assertEquals((-0.23081134717120586), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = oldV.SIGN((-0.23081134717120586), (-1521.1));
      assertEquals((-0.23081134717120586), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = oldV.SIGN((-1521.1), 2313745.2099999995);
      assertEquals(1521.1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = oldV.snippet(9.999999999999801E-15, 9.999999999999801E-15, (-9.999999999999801E-15));
      assertEquals(9.999999999999801E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = oldV.snippet((-9.999999999999801E-15), (-9.999999999999801E-15), 9.999999999999801E-15);
      assertEquals((-9.999999999999801E-15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = oldV.snippet((-0.23081134717120586), 0.0, (-0.23081134717120586));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = oldV.snippet((-1521.1), 3989.874336427186, 1521.1);
      assertEquals((-0.23081134717120586), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = oldV.snippet(3926.41257, 1091.6913728250825, 1091.6913728250825);
      assertEquals(0.8822210501476537, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = oldV.SQR(1521.1);
      assertEquals(2313745.2099999995, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
