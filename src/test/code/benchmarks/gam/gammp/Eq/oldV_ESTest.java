/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 06 19:37:16 GMT 2024
 */

package benchmarks.gam.gammp.Eq;

import org.junit.Test;
import static org.junit.Assert.*;
import benchmarks.gam.gammp.Eq.oldV;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class oldV_ESTest extends oldV_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = oldV.snippet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3631.536846310857, 3631.536846310857, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = oldV.snippet((-3832.42943867829), 3618.09482662012, 0.0, 3209.48473, (-454.538839));
      assertEquals((-1000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = oldV.snippet(Double.POSITIVE_INFINITY, 1311.8813172490602, 0.0, 1311.8813172490602, Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = oldV.gser(Double.NaN, Double.NaN, (-309.3), (-1045.37));
      assertEquals((-1045.37), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = oldV.gcf(31164.385133016298, 0.0, 0.0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = oldV.gcf((-1.0), 0.6321205588285578, 0.6321205588285578);
      assertEquals(0.22032009056666388, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = oldV.gcf(1835.3806517415335, 1377.8167342, 1835.3806517415335);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = oldV.gammln(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = oldV.gammln(2.0);
      assertEquals((-4.440892098500626E-16), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = oldV.gammln(2.5066282746310007);
      assertEquals(0.2893543460445205, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = oldV.gser(1941.9186397349638, 1064.0, 1941.9186397349638, (-1.0));
      assertEquals(1.490787443338252E-128, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = oldV.gcf(3.0, 0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = oldV.gser(3.0, (-1000.0), 0.0, (-1000.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = oldV.gser((-149.01863), 0.0, (-1000.0), (-149.01863));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = oldV.snippet(18.26526003052364, 18.26526003052364, 18.26526003052364, 0.0, (-1000.0));
      assertEquals(0.5311237335955301, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = oldV.snippet(0.0, 0.0, (-1000.0), (-149.01863), (-1000.0));
      assertEquals((-1000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = oldV.snippet(13.327206763895543, 2523.17057, 13.327206763895543, 13.327206763895543, 13.327206763895543);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = oldV.snippet((-149.01863), (-149.01863), (-149.01863), (-149.01863), 0.0);
      assertEquals((-1000.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      oldV oldV0 = new oldV();
  }
}
